Installation Instructions for AmbulantPlayer
********************************************

=======
This file contains instructions for building AmbulantPlayer from
source, for all of Windows, Windows Mobile 5, Unix and Mac OS X.

This file is part of the Ambulant Player source distribution,
which can be downloaded via <http://www.ambulantplayer.org>.

Prerequisites
-------------

Obviously you will need a compiler/linker/development environment.
For Windows you need:
- Microsoft Visual Studio .NET 2008 SP2
For Linux desktop you need at least autoconf, automake, GNU gcc
(at least version 4.0), gtk2-devel and/or qt-devel (for graphics),
and alsa-devel (for sound).

For MacOSX you need the Apple Developer tools (XCode 3.1 or later).

You also need to build and install several third party packages
that Ambulant depends on. For MacOSX and Linux we have a script
to download/build/install these, for Windows we provide zipfiles with
sources that are known to work (for us, at least:-). See below
for per-platform details.

Building for Linux
------------------

After unpacking Ambulant you should first download and build the required
3rd party packages. In third_party_packages, run the following command:

	python build-third-party-packages.py linux
	
This will install all needed packages (insofar they are not installed
on your system yet) in "third_party_packages/installed", and configure
and make will pick them up from there.

(In case the automatic build does not suit your needs: see
third_party_pckages/readme.txt for manual building).


After this, the normal "configure"/"make"/"make install" combo can be used here
in the toplevel directory to create the player, see further down
in this document for details if you are not familiar with
this scheme.

The resulting binary is called AmbulantPlayer and usually deposited in
/usr/local/bin (depending on any --prefix options to
configure). Libraries and include files are also installed under
/usr/local.

If you want to build the Python API to Ambulant you need to add the
--with-python option to configure.

If you want to build the Firefox plugin you need to add --with-npambulant.
But: you should first read src/npambulant/README-linux and
third_party_packages/readme.txt for instructions on downloading the
Mozilla XPCOM API.

For more special case configure options consult "configure --help".

Building for Mac OS X
---------------------
For universal build, make sure you read this whole section.

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). Eventually we will
put these in the next category, but for now you need to download, build and
install them manually:
- gettext, version 0.17 or later
- libtool, version 2.2.6 or later
- pkg-config, version 0.19 or later

Next, make sure you install the third party packages on which Ambulant
depends. These will be installed locally, for ambulant only (in
directory third_party_packages/installed). Go to third_party_packages and run

	python build-third-party-packages.py mac10.6
	
That is, if you are on MacOSX 10.6. This will build the packages 32/64 bit
universal. If you are on 10.4 or 10.5 you specify "mac10.4" as the argument,
and the packages will be built Intel/PowerPC universal (both 32bit).

For manual builds, see third_party_packages/readme.txt and readme-osx.txt.

Then the normal "configure"/"make"/"sudo make install" combo can be used
here in the toplevel directory to create the player, see further down
in this document for details if you are not familiar with
this scheme.

"make install" installs the shared libraries and such into the path
specified with the --prefix configure option, but the application,
"Ambulant Player.app" is always installed into /Applications.

If you want to install only the Ambulant Player.app application you
should first run make in the toplevel build directory and then
"sudo make install" in src/player_macosx. This will not install anything
into /usr/local.

XCode projects are also available, mainly for debugging purposes, but
this needs some handcrafting to get it to work (it contains absolute
pathnames to include directories to work around an XCode bug). Look in
the "projects" directory.

For MacOSX 10.6 you can build a universal 32-bit/64-bit Ambulant, by
running configure as:
	./configure --with-macfat --disable-dependency-tracking
	

Building for older MacOSX releases
----------------------------------

Support for MacOSX older than 10.6 is deprecated, but may still work.
We will not actively break it, but also not go out of our way to keep
it working.

For MacOSX 10.4 or 10.5 you can build a universal PowerPC/Intel Ambulant,
by running configure as:
	./configure --with-universalsdk --disable-dependency-tracking
	
You can pass an SDK to the --with-universalsdk option to enable doing a
10.4 compatible build on 10.5 (or 10.6), but then you must also set the
MACOSX_DEPLOYMENT_TARGET=10.4 environment variable.

To build the Safari/WebKit plugin: see src/webkit_plugin/README.

Building for Windows
--------------------

All projects are located in the "projects" folder
at the toplevel folder. "vc9" is for Visual Studio 2008, SP2.

Installing and building the third party packages on Windows is more of a
pain than it is on unix. For this reason, read these instructions *very carefully*,
please. We hope these instructions are complete, otherwise
please report back.

From the ambulant sourcefore download page, obtain 
"Third Party Packages, win32_wm5". Download and unzip in a temporary
location, then move the directories named above into third_party_packages
in your ambulant distribution. Some packages you must download separately, and 
put the resulting unpacked distribution in third_party_packages:

- ffmpeg (pre-configured and pre-built) should be obtained from
  the Ambulant SF download page, package "ffmpeg for Ambulant, win32".
- SDL is not included, get SDL 1.2.X from www.libsdl.org.
- Get the live555 libraries from www.live555.com. It should no longer be
  necessary to apply the modifications from third_party_packages/live555_VC9 (or VC8).
- Xerces is not included, get it yourself (either 3.0 or 2.8)
  from xerces.apache.org. 
- libxml2 is not included, get it from xmlsoft.org.
- if you want to build the Firefox plugin you must also get the Mozilla XPCOM API,
  most easily found by looking for "xulrunner-sdk" or "Gecko SDK".
- If you want Python support get Python 2.6 and install it (standard Windows
  binary release).
  
At this point you may want to inspect projects\vc9\Ambulant-win32.vsprops. This
has the pathnames of all the components, etc. For VS2005 you have to edit the
individual projects if you have things in non-standard places. (If you did not
heed the second paragraph and opened some projects already: close them. They
depend on settings in this vsprops file).

Next, build Xerces, following their instructions.

Next, build SDL. Instructions are in VisualC.html in their toplevel folder.

Then, open projects\vc9\third_party_packages.sln, select the "Release"
configuration and build it. This will build everything (except Xerces, which you
did manually in the previous step) and put it where Ambulant expects it.
Also build the "Debug" configuration, if you want it.

After these steps you are ready to build AmbulantPlayer itself. Open
projects\vc9\Ambulant-win32.sln and select "Ambulant Player" as the default
project (right-click on it for the context menu that allows you to do this).
Select the build type, use "ReleaseShlib" in case of doubt. If you did not
get Python or XPCOM you can disable the corresponding project in the solution.

The resulting application is deposited in bin\win32 in the toplevel
directory.

Building for iPhane iOS4.0 (unfinished, untested, unreliable).
--------------------------

third_party_packages:
NOTE: for iPhone, SDL-1.3.0 currently needs to be modfied:
- ./src/video/uikit/SDL_uikitappdelegate.m contains an entry point main(int arc,char** argv)
that must be disabled (either by changing it to Xmain or using #ifdef).

build third_party_packages using the same technique as described for MACOS in
Documentation/misc/README-Distribution, for both iPhone Simulator and Device:

- cd to toplevel ambulant directory
- mkdir -p build-iOS40-Simulator/third_party_packages
- cd build-iOS40-Simulator/third_party_packages
# Note: next pathname may change with each iOS release, vital to find proper compilers/linkers
- ORIG_PATH=$PATH;PATH=/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:$PATH
- export IPHONEOS_DEPLOYMENT_TARGET=4.0; export MACOSX_DEPLOYMENT_TARGET=10.6
- ../../third_party_packages/build-third-party-packages.py iOS40-Simulator
- PATH=$ORIG_PATH

- cd to toplevel ambulant directory
- mkdir -p build-iOS40-Device/third_party_packages
- cd build-iOS40-Device/third_party_packages
# Note: next pathname may change with each iOS release, vital to find proper compilers/linkers
- ORIG_PATH=$PATH;PATH=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:$PATH
- export IPHONEOS_DEPLOYMENT_TARGET=4.0; export MACOSX_DEPLOYMENT_TARGET=10.6
- ../../third_party_packages/build-third-party-packages.py iOS40-Device
- PATH=$ORIG_PATH

Now xcode can be started on th project src/player_iphone/player_iphone.xcodeproj,
select Target iphone-simulator with Active SDK Simulator
or Target iphone-device with Active SDK Device.
Other combinations will not work.

