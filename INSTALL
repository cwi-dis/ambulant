Installation Instructions for AmbulantPlayer
********************************************

=======
This file contains instructions for building AmbulantPlayer from
source, for all of Windows, Unix, Mac OS X and iOS.

This file is part of the Ambulant Player source distribution,
which can be downloaded via <http://www.ambulantplayer.org>.

Prerequisites
-------------

Obviously you will need a compiler/linker/development environment.
For Windows you need Microsoft Visual Studio 2010 (2008 may still work, untested).

For Linux desktop you need at least autoconf, automake, libtool, gettext,
GNU gcc++ (at least version 4.0), gtk2-devel and/or qt-devel (for graphics),
yasm and alsa-devel (for sound). For SDL2 (video) you need also libxext-devel,
asound2-devel, pulse-devel, mercurial, libjpeg-devel and pango-devel. 

For MacOSX and iOS you need the Apple Developer tools (XCode 5 or later).

You also need to build and install several third party packages that
Ambulant depends on. We have a script to download/build/install these. In
the directory third_party_packages, run
../scripts/build-third-party-packages.py. This script contains many
hardcoded URLs, you may need to adapt it when new versions of packages have
become available.

Building for Linux
------------------

After unpacking Ambulant you should first check that various packages needed for
building Ambulant are available (such as autotools). For Ubuntu there is a script
"scripts/precheck-ubuntu.sh" that checks this (and when you have sudo rights can
help you install them).

Next you should download and build the required
3rd party packages. In third_party_packages, run one of the following commands:

	python ../scripts/build-third-party-packages.py linux
	
or
	

	sudo python ../scripts/build-third-party-packages.py debian
	
The first version will install all needed packages (insofar they are not installed
on your system yet) in "third_party_packages/installed", and configure
and make will pick them up from there. This method will not pollute your
system with lots of packages you may not be interested in.

NOTE: SDL_Pango will not build cleanly on all Linux systems. You can probably
ignore this error for normal Ambulant builds.

You could also use "debian" in stead of "linux", then the third party
packages will be installed system-wide through the package manager.
This is actually preferred for most users, as components like the
Ambulant Python module will now automatically pick up the packages
without needing LD_LIBRARY_PATH or such tricks. You need sudo rights for this.

After this, the normal "configure"/"make"/"make install" combo can be used here
in the toplevel directory to create the player, see further down
in this document for details if you are not familiar with
this scheme.

The resulting binary is called AmbulantPlayer and usually deposited in
/usr/local/bin (depending on any --prefix options to
configure). Libraries and include files are also installed under
/usr/local.

If you want to build the Python API to Ambulant you need to add the
--with-python option to configure.

If you want to build the Firefox plugin you need to add --with-npambulant.
But: you should first read src/npambulant/README-linux and
third_party_packages/readme.txt for instructions on downloading the
Mozilla XPCOM API.

For more special case configure options consult "configure --help".

Building for Mac OS X, configure/make style
-------------------------------------------

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). The script
"scripts/precheck-macosx.sh" may be of help installing these.
Or build and install them manually:
- autoconf, version 2.69 or later
- automake, version 1.14 or later
- gettext, version 0.18.3 or later
- libtool, version 2.4.2 or later
- pkg-config, version 0.28 or later
- yasm, version 1.3 or later
- gas-preprocessor

Next, make sure you install the third party packages on which Ambulant
depends. These will be installed locally, for ambulant only (in
directory third_party_packages/installed). 

Go to third_party_packages and run

	python ../scripts/build-third-party-packages.py macosx
	
Then the normal "configure"/"make"/"sudo make install" combo can be used
here in the toplevel directory to create the player. You
can build a universal 32-bit/64-bit Ambulant, by running configure as:
	./configure --with-macfat --disable-dependency-tracking

"make install" installs the shared libraries and such into the path
specified with the --prefix configure option, but the application,
"Ambulant Player.app" is always installed into /Applications.

If you want to install only the Ambulant Player.app application you
should first run make in the toplevel build directory and then
"sudo make install" in src/player_macosx. This will not install anything
into /usr/local.

Building for Mac OS X using XCode
---------------------------------

[Not sure the next paragraph is still true]

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). See the section above
for the list of prerequisites.

XCode projects are available in projects/xcode43. For some components
such as the iOS player or the Safari plugin you must use these, for
the desktop player you can use either the configure/make scheme described
above or the projects.

To use xcode, you open any of the projects in project/xcode43, and it will build
not only that product but also everything it depends on (including third
party packages).

The toplevel projects are as follows:
- AmbulantPlayer.xcodeproj builds the desktop player
- iAmbulant.xcodeproj builds the iOS player
- npambulant.xcodeproj builds the browser plugin

The projects are parameterized, so if something like the pathname of a
third party package changes you should inspect the files in
projects/xcode43/config and change things there (possibly in addition to
changing the build-third-party-packages.py script).

Building for Windows
--------------------

All projects are located in the "projects" folder
at the toplevel folder. "vc9" is for Visual Studio 2008, SP2, "vc10" for
Visual Studio 2010.

You must not only have Visual Studio, but also the Microsoft DirectX SDK. This
can be downloaded from the Microsoft site. NOTE: the version of June 2010 does
not seem to work, it is missing a library (ddraw.lib) that Ambulant needs. The
February 2010 is the last version known to work. 

Next, you need the Microsoft Windows SDK, v7.0A or v7.1. You also need the
"Samples" subdirectory, and even though the SDK is usually installed by default
with Visual Studio the samples are not. Google and install.

You also need 7-Zip and Python 2.6 or 2.7.

First, you build the third party packages, by opening a "cmd" command window
and navigating to ambulant/third_party_packages. You now run the following
commands:
	xxx> call "c:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat"
and
	xxx> call "c:\PythonXX\python.exe" ..\scripts\build-third-party-packages.py win32

If you have both VC9 and VC10 installed and you want to use VC10 to build you must unset
the VC9 environment var:
	xxx> set VS90COMNTOOLS=
Failing to do so will result in an error trying to build libdispatch-vs2008.

This should build all third party packages and put them where the Ambulant
build expects them. If you have to change anything in this python script, for
example because a new version of some package has replaced an older one,
you will probably also have to change the project properties files. Sometimes
you need to re-run the Python script after fixing the property files.
  
At this point you may want to inspect projects/vc9/Ambulant-win32.vsprops
and/or projects/vc10/Ambulant-win32.props. These files
have the pathnames of all the components, etc. Change things here to reflect
your setup.

After these steps you are ready to build AmbulantPlayer itself. Open
Ambulant-win32.sln and select "Ambulant Player" as the default
project (right-click on it for the context menu that allows you to do this).
Select the build type, for example "Release" for Direct2D (Windows 7 only) or
"ReleaseDX" for DirectDraw (XP or later).

NOTE: if you are building with VS2008 you may get errors on _Swap_adl. If you do:
search the solution for _Swap_adl, you will need to make a small change in two
locations. The gory details of this problem are explained in a comment there.

The resulting application is deposited in bin\win32 in the toplevel
directory.

If you want to build the Firefox or IE plugin you may need to install some
additional tools such as CabArc. Also, to build the IE plugin you must run
Visual Studio (sic!) with Administrator permissions.

Building for iOS
----------------

First there are some packages that need to be installed system-wide, see the section
on building for MacOSX for the list.

Now you can open projects/xcode43/iAmbulant.xcodeproj and it will build everything
needed.

The projects are parameterized, so if something like the pathname of a
third party package changes you should inspect the files in
projects/xcode43/config and change things there (possibly in addition to
changing the build-third-party-packages.py script).
