Installation Instructions for AmbulantPlayer
********************************************

=======
This file contains instructions for building AmbulantPlayer from
source, for all of Windows, Windows Mobile 5, Unix and Mac OS X.

This file is part of the Ambulant Player source distribution,
which can be downloaded via <http://www.ambulantplayer.org>.

Prerequisites
-------------

Obviously you will need a compiler/linker/development environment.
For Windows you need Microsoft Visual Studio .NET 2008 SP2 or Visual
Studio 2010.

For Linux desktop you need at least autoconf, automake, GNU gcc
(at least version 4.0), gtk2-devel and/or qt-devel (for graphics),
and alsa-devel (for sound).

For MacOSX and iOS you need the Apple Developer tools (XCode 3.2 or later).

You also need to build and install several third party packages that
Ambulant depends on. We have a script to download/build/install these. In
the directory third_party_packages, run
../scripts/build-third-party-packages.py. This script contains many
hardcoded URLs, you may need to adapt it when new versions of packages have
become available.

Building for Linux
------------------

After unpacking Ambulant you should first download and build the required
3rd party packages. In third_party_packages, run one of the following commands:

	python ../scripts/build-third-party-packages.py linux
	
or
	

	python ../scripts/build-third-party-packages.py linux
	
The first version will install all needed packages (insofar they are not installed
on your system yet) in "third_party_packages/installed", and configure
and make will pick them up from there. This method will not pollute your
system with lots of packages you may nnot be interested in.

You could also use "debian" in stead of "linux", then the third party
packages will be installed system-wide through the package manager.
This is actually preferred for most users, as components like the
Ambulant Python module will now automatically pick up the packages
without needing LD_LIBRARY_PATH or such tricks.

After this, the normal "configure"/"make"/"make install" combo can be used here
in the toplevel directory to create the player, see further down
in this document for details if you are not familiar with
this scheme.

The resulting binary is called AmbulantPlayer and usually deposited in
/usr/local/bin (depending on any --prefix options to
configure). Libraries and include files are also installed under
/usr/local.

If you want to build the Python API to Ambulant you need to add the
--with-python option to configure.

If you want to build the Firefox plugin you need to add --with-npambulant.
But: you should first read src/npambulant/README-linux and
third_party_packages/readme.txt for instructions on downloading the
Mozilla XPCOM API.

For more special case configure options consult "configure --help".

Building for Mac OS X, configure/make style
-------------------------------------------

Warning: as of this writing, building on 10.7 Lion does not work: there are
minimal tweaks that need to be made to SDL and gettext. 

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). Eventually we will
put these in the next category, but for now you need to download, build and
install them manually:
- gettext, version 0.17 or later
- libtool, version 2.2.6 or later
- pkg-config, version 0.19 or later

Next, make sure you install the third party packages on which Ambulant
depends. These will be installed locally, for ambulant only (in
directory third_party_packages/installed). Go to third_party_packages
and run

	python ../scripts/build-third-party-packages.py mac10.6
	
That is, if you are on MacOSX 10.6. This will build the packages 32/64
bit universal. If you are on 10.4 or 10.5 you specify "mac10.4" as the
argument, and the packages will be built Intel/PowerPC universal (both
32bit).

For manual builds, see third_party_packages/readme.txt and readme-osx.txt.

Then the normal "configure"/"make"/"sudo make install" combo can be used
here in the toplevel directory to create the player. For MacOSX 10.6 you
can build a universal 32-bit/64-bit Ambulant, by running configure as:
	./configure --with-macfat --disable-dependency-tracking

"make install" installs the shared libraries and such into the path
specified with the --prefix configure option, but the application,
"Ambulant Player.app" is always installed into /Applications.

If you want to install only the Ambulant Player.app application you
should first run make in the toplevel build directory and then
"sudo make install" in src/player_macosx. This will not install anything
into /usr/local.

Building for Mac OS X 10.6 using XCode
--------------------------------------

Warning: as of this writing, building on 10.7 Lion does not work: there are
minimal tweaks that need to be made to SDL and gettext.

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). Eventually we will
put these in the next category, but for now you need to download, build and
install them manually:
- gettext, version 0.17 or later
- libtool, version 2.2.6 or later
- pkg-config, version 0.19 or later

XCode projects are available in projects/xcode32. For some components
such as the iOS player or the Safari plugin you must use these, for
the desktop player you can use either the configure/make scheme described
above or the projects. To build using the projects you need to do first
do one initial step (in the toplevel ambulant directory):
	$ mkdir build-3264
	$ mkdir build-3264/third_party_packages
Then you open any of the projects in project/xcode32, and it will build
not only that product but also everything it depends on (including third
party packages).

The projects are parameterized, so if something like the pathname of a
third party package changes you should inspect the files in
projects/xcode32/config and change things there (possibly in addition to
changing the build-third-party-packages.py script).

Building for older MacOSX releases
----------------------------------

Support for MacOSX older than 10.6 is deprecated, but may still work.
We will not actively break it, but also not go out of our way to keep
it working.

For MacOSX 10.4 or 10.5 you can build a universal PowerPC/Intel Ambulant,
by running configure as:
	./configure --with-universalsdk --disable-dependency-tracking
	
You can pass an SDK to the --with-universalsdk option to enable doing a
10.4 compatible build on 10.5 (or 10.6), but then you must also set the
MACOSX_DEPLOYMENT_TARGET=10.4 environment variable.

Building the Safari plugin will probably not work for 10.4 anymore.

Building for Windows
--------------------

All projects are located in the "projects" folder
at the toplevel folder. "vc9" is for Visual Studio 2008, SP2, "vc10" for
Visual Studio 2010.

You must not only have Visual Studio, but also the Microsoft DirectX SDK. This
can be downloaded from the Microsoft site. NOTE: the version of June 2010 does
not seem to work, it is missing a library (ddraw.lib) that Ambulant needs. The
February 2010 is the last version known to work. 

Next, you need the Microsoft Windows SDK, v7.0A or v7.1. You also need the
"Samples" subdirectory, and even though the SDK is usually installed by default
with Visual Studio the samples are not. Google and install.

You also need 7-Zip and Python 2.6 or 2.7.

First, you build the third party packages, by opening a "cmd" command window
and navigating to ambulant/third_party_packages. You now run the following
commands:
	xxx> call "c:\Program Files\Microsoft Visual Studio 9.0\VC\bin\vcvars.bat"
or
	xxx> call "c:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat"
and
	xxx> call "c:\PythonXX\python.exe" ..\scripts\build-third-party-packages.py win32

If you have both VC9 and VC10 installed and you want to use VC10 to build you must unset
the VC9 environment var:
	xxx> set VS90COMNTOOLS=
Failing to do so will result in an error trying to build libdispatch-vs2008.

This should build all third party packages and put them where the Ambulant
build expects them. If you have to change anything in this python script, for
example because a new version of some package has replaced an older one,
you will probably also have to change the project properties files. Sometimes
you need to re-run the Python script after fixing the property files.
  
At this point you may want to inspect projects/vc9/Ambulant-win32.vsprops
and/or projects/vc10/Ambulant-win32.props. These files
have the pathnames of all the components, etc. Change things here to reflect
your setup.

After these steps you are ready to build AmbulantPlayer itself. Open
Ambulant-win32.sln and select "Ambulant Player" as the default
project (right-click on it for the context menu that allows you to do this).
Select the build type, for example "Release" for Direct2D (Windows 7 only) or
"ReleaseDX" for DirectDraw (XP or later).

The resulting application is deposited in bin\win32 in the toplevel
directory.

If you want to build the Firefox or IE plugin you may need to install some
additional tools such as CabArc. Also, to build the IE plugin you must run
Visual Studio (sic!) with Administrator permissions.

Building for iPhane iOS4
------------------------

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). Eventually we will
put these in the next category, but for now you need to download, build and
install them manually:
- gettext, version 0.17 or later
- libtool, version 2.2.6 or later
- pkg-config, version 0.19 or later

Before opening the XCode projects, do the following (at the toplevel Ambulant
directory):
	$ mkdir build-{iOS,iOS-Fat,iOS-Simulator}
	$ mkdir build-{iOS,iOS-Fat,iOS-Simulator}/third_party_packages

Now you can open projects/xcode32/iAmbulant.xcodeproj and it will build everything
needed.

The projects are parameterized, so if something like the pathname of a
third party package changes you should inspect the files in
projects/xcode32/config and change things there (possibly in addition to
changing the build-third-party-packages.py script).

Finally a word of warning: if you do both MacOSX and iOS development the
projects (or XCode?) sometimes get confused. If you can't build, or debug, this
may be the issue. Usually, removing all user.mode1v3 and user.pbxuser from
the projects and removing the "build" subdirectory in projects/xcode32 will
clean things up.
