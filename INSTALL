Installation Instructions for AmbulantPlayer
********************************************

=======
This file contains instructions for building AmbulantPlayer from
source, for all of Windows, Windows Mobile 5, Unix and Mac OS X.

This file is part of the Ambulant Player source distribution,
which can be downloaded via <http://www.ambulantplayer.org>.

Prerequisites
-------------

Obviously you will need a compiler/linker/development environment.
For Windows you need one of:
- Microsoft Visual Studio .NET 2008 SP2 (preferred)
- Microsoft Visual Studio .NET 2005 SP1.
For Linux desktop you need GNU gcc, at least version 4.0/
For MacOSX you need the Apple Developer tools (XCode 3.1 or later).
For Windows Mobile 5 things look a bit bleak, as of this writing.
Contact us if you need it, and have some time to invest.

You also need to build and install several third party packages
that Ambulant depends on. For MacOSX and Linux we have a script
to download/build/install these, for Windows we provide zipfiles with
sources that are known to work (for us, at least:-). See below
for per-platform details.

Building for Linux
------------------

After unpacking you should first download and build the required 3rd party
packages. In third_party_packages, run the following command:

	python build-third-party-packages.py linux
	
This will install all needed packages (insofar they are not installed
on your system yet) in "third_party_packages/installed", and configure
and make will pick them up from there.

(In case the automatic build does not suit your needs: see
third_party_pckages/readme.txt for manual building).


After this, the normal "configure"/"make"/"make install" combo can be used here
in the toplevel directory to create the player, see further down
in this document for details if you are not familiar with
this scheme.

The resulting binary is called AmbulantPlayer and usually deposited in
/usr/local/bin (depending on any --prefix options to
configure). Libraries and include files are also installed under
/usr/local.

If you want to build the Python API to Ambulant you need to add the
--with-python option to configure.

If you want to build the Firefox plugin you need to add --with-npambulant.
But: you should first read src/npambulant/README-linux and
third_party_packages/readme.txt for instructions on downloading the
Mozilla XPCOM API.

For more special case configure options consult "configure --help".

Building for Mac OS X
---------------------
For universal build, make sure you read this whole section.

First there are some packages that need to be installed system-wide, i.e.
in /usr/local (or /opt, or whereever you want to put them). Eventually we will
put these in the next category, but for now you need to download, build and
install them manually:
- gettext, version 0.17 or later
- libtool, version 2.2.6 or later
- pkg-config, version 0.19 or later

Next, make sure you install the third party packages on which Ambulant
depends. These will be installed locally, for ambulant only (in
directory third_party_packages/installed). Go to third_party_packages and run

	python build-third-party-packages.py mac10.6
	
That is, if you are on MacOSX 10.6. This will build the packages 32/64 bit
universal. If you are on 10.4 or 10.5 you specify "mac10.4" as the argument,
and the packages will be built Intel/PowerPC universal (both 32bit).

For manual builds, see third_party_packages/readme.txt and readme-osx.txt.

Then the normal "configure"/"make"/"sudo make install" combo can be used
here in the toplevel directory to create the player, see further down
in this document for details if you are not familiar with
this scheme.

"make install" installs the shared libraries and such into the path
specified with the --prefix configure option, but the application,
"Ambulant Player.app" is always installed into /Applications.

If you want to install only the Ambulant Player.app application you
should first run make in the toplevel build directory and then
"sudo make install" in src/player_macosx. This will not install anything
into /usr/local.

XCode projects is also available, mainly for debugging purposes, but
this needs some handcrafting to get it to work (it contains absolute
pathnames to include directories to work around an XCode bug). Look in
the "projects" directory.

For MacOSX 10.6 you can build a universal 32-bit/64-bit Ambulant, by
running configure as:
	./configure --with-macfat --disable-dependency-tracking
	
For MacOSX 10.4 or 10.5 you can build a universal PowerPC/Intel Ambulant,
by running configure as:
	./configure --with-universalsdk --disable-dependency-tracking
	
You can pass an SDK to the --with-universalsdk option to enable doing a
10.4 compatible build on 10.5 (or 10.6), but then you must also set the
MACOSX_DEPLOYMENT_TARGET=10.4 environment variable.

To build the Safari/WebKit plugin: see src/webkit_plugin/README.

Building for Windows
--------------------

All projects are located in the "projects" folder
at the toplevel folder. "vc9" is for Visual Studio 2008, SP2. "vc8",
for Visual Studio 2005 SP1, should still work too.

For VS2005 you must probably also install the following two packages
from Microsoft:
- Microsoft Plaftorm SDK for Windows Server 2003 R2
- Microsoft DirectX SDK (August 2006), or newer.
The include and lib files for these have to be added for searching. This is easiest
done in VS through Tools->Options->Projects and Solutions->VC++ Directories.
Then select "Include files" and add the include dirs, "Library files" and add the
library dirs.
For VS2008 you should have these already.

Installing and building the third party packages on Windows is more of a
pain than it is on unix. For this reason, read these instructions *very carefully*,
please. We hope these instructions are complete, otherwise
please report back.

From the ambulant sourcefore download page, obtain 
"Third Party Packages, win32_wm5". Download and unzip in a temporary
location, then move the directories named above into third_party_packages
in your ambulant distribution. Some packages you must download separately, and 
put the resulting unpacked distribution in third_party_packages:

- ffmpeg (pre-configured and pre-built) should be obtained from
  the Ambulant SF download page, package "ffmpeg for Ambulant, win32".
- SDL is not included, get SDL 1.2.X from www.libsdl.org.
- Get the live555 libraries from www.live555.com. Apply the modifications
  from third_party_packages/live555_VC9 (or VC8) before building (in the next step).
- Xerces is not included, get it yourself (either 3.0 or 2.8)
  from xerces.apache.org. 
- libxml2 is not included, get it from xmlsoft.org.
- if you want to build the Firefox plugin you must also get the Mozilla XPCOM API.
- If you want Python support get Python 2.6 and install it (standard Windows
  binary release).
  
At this point you may want to inspect projects\vc9\Ambulant-win32.vsprops. This
has the pathnames of all the components, etc. For VS2005 you have to edit the
individual projects if you have things in non-standard places.

Next, build Xerces, following their instructions.

Then, open projects\vc9\third_party_packages.sln (or vc8), select the "Release"
configuration and build it. This will build everything (except Xerces, which you
did manually in the previous step) and put it where Ambulant expects it.
Also build the "Debug" configuration, if you want it.

After these steps you are ready to build AmbulantPlayer itself. Open
projects\vc9\Ambulant-win32.sln and select "Ambulant Player" as the default
project (right-click on it for the context menu that allows you to do this).
Select the build type, use "ReleaseShlib" in case of doubt. If you did not
get Python or XPCOM you can disable the corresponding project in the solution.

The resulting application is deposited in bin\win32 in the toplevel
directory.

Building for Windows Mobile 5
-----------------------------

Building for Windows Mobile 5 is even more painful than building for Windows
Desktop. Follow the steps for Windows Desktop above, with the following
changes:
- the projects are in projects/vc8-wince5-smil3.
- get ffmpeg from the Ambulant sf package "ffmpeg for Ambulant, wm5".
- Xerces and XPCOM are not supported.

The resulting application is deposited in bin\wince-arm in the toplevel
directory.

Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007 Free Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following
more-detailed instructions are generic; see the `README' file for
instructions specific to this package.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  6. Often, you can also type `make uninstall' to remove the installed
     files again.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c99 CFLAGS=-g LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   With a non-GNU `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

Installation Names
==================

By default, `make install' installs the package's commands under
`/usr/local/bin', include files under `/usr/local/include', etc.  You
can specify an installation prefix other than `/usr/local' by giving
`configure' the option `--prefix=PREFIX'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option `--exec-prefix=PREFIX' to `configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:

     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

