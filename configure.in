AC_INIT([ambulant],[2.3])
AC_CONFIG_SRCDIR(src/libambulant/get_version.cpp)
AC_CONFIG_AUX_DIR([libltdl/config])
AC_CONFIG_MACRO_DIR([libltdl/m4])
AM_INIT_AUTOMAKE
AMBULANT_VERSION=2.3

dnl =================================================================
QT_REQUIRED=3.3.4
GTK_REQUIRED=1.2.8

AC_SUBST(QT_REQUIRED)

dnl ================================================================

AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_HEADER_STDC
AC_HEADER_ASSERT
AC_PROG_LIBTOOL
LT_AC_PROG_SED
am__api_version="1.9"
#
# Allow either included or standard ltdl
#
LT_CONFIG_LTDL_DIR([libltdl])
LT_INIT(dlopen)
LTDL_INIT(convenience)
# ??? AC_LIBTOOL_DLOPEN
# ??? AC_LIB_LTDL
# ??? AC_SUBST(INCLTDL)
# ??? AC_SUBST(LIBLTDL)

AM_GNU_GETTEXT([external])
AC_CONFIG_FILES([Makefile po/Makefile.in
	src/Makefile 
	src/npambulant/Makefile
	src/libambulant/Makefile 
	src/player_unix/Makefile
	src/player_gtk/Makefile
	src/player_macosx/Makefile
	src/plugins/Makefile
	src/pyambulant/Makefile
	include/Makefile
	include/ambulant/Makefile
	include/ambulant/config/Makefile
	include/ambulant/config/compiler/Makefile
	include/ambulant/config/platform/Makefile
	include/ambulant/config/stdlib/Makefile
	include/ambulant/common/Makefile
	include/ambulant/compat/Makefile
	include/ambulant/lib/Makefile
	include/ambulant/lib/unix/Makefile
	include/ambulant/lib/win32/Makefile
	include/ambulant/smil2/Makefile
	include/ambulant/net/Makefile
	include/ambulant/gui/Makefile
	include/ambulant/gui/dx/Makefile
	include/ambulant/gui/none/Makefile
	include/ambulant/gui/cocoa/Makefile
	include/ambulant/gui/cg/Makefile
	include/ambulant/gui/qt/Makefile
	include/ambulant/gui/gtk/Makefile
	include/ambulant/gui/SDL/Makefile
	include/ambulant/gui/gstreamer/Makefile
	third_party_packages/Makefile
	Documentation/Makefile
	Extras/Makefile])
	

AC_CONFIG_COMMANDS([libtool_patch],[chmod 755 $srcdir/patch_libtool.sh;$srcdir/patch_libtool.sh])

# Variables needed.
export PATH=`pwd`/third_party_packages/installed/bin:$PATH
export PKG_CONFIG_PATH=`pwd`/third_party_packages/installed/lib/pkgconfig:$PKG_CONFIG_PATH

#
# Do we have pkg-config?
#
#AC_MSG_CHECKING(for pkg-config)
#PKG_CHECK_MODULES(pkg-config,[pkg-config >= 0.18], pkg_config=true, pkg_config=false)
#AM_CONDITIONAL(WITH_PKG_CONFIG, test $pkg_config = true)
#AC_MSG_RESULT($pkg_config)
AC_CHECK_PROG(PKG_CONFIG,pkg-config,`which pkg-config`)

#
# This variable records whether we have support for
# any windowing system (so we can give a warning at
# the end if not)
#
with_frontend=false

#
# Do we want MacOSX universal (ppc/intel) binary support?
#
AC_MSG_CHECKING(for --with-universalsdk)
AC_ARG_WITH(universalsdk,
    AS_HELP_STRING([--with-universalsdk],[Build MacOSX 10.4 universal (ppc/intel) binary]),
	[
		need_sysroot=no
		case $withval in
		yes)
			withval=/Developer/SDKs/MacOSX10.4u.sdk
			case `uname -r` in
			8*) 
				need_sysroot=yes
				;;
			esac
			;;
		*)	need_sysroot=yes
			;;
		esac
		case $withval in
		no)
			with_universalsdk=false
			need_sysroot=no
			;;
		*)
			with_universalsdk=true
			if test $need_sysroot = yes ; then
				sysroot="-isysroot ${withval}"
			else
				sysroot=""
			fi
			CFLAGS="-arch ppc -arch i386 ${sysroot} ${CFLAGS}"
			CXXFLAGS="-arch ppc -arch i386 ${sysroot} ${CXXFLAGS}"
			OBJCFLAGS="-arch ppc -arch i386 ${sysroot} ${OBJCFLAGS}"
			#LDFLAGS="-arch ppc -arch i386 ${sysroot} ${LDFLAGS}"
			# Need to pass these to recursive configure calls to (esp. libltdl)
			export CFLAGS
			ac_configure_args="$ac_configure_args --disable-dependency-tracking"
			;;
		esac
	],
	[with_universalsdk=false])
AC_MSG_RESULT($with_universalsdk)

#
# Do we want MacOSX fat (32/64 bit) binary support?
#
AC_MSG_CHECKING(for --with-macfat)
AC_ARG_WITH(macfat,
    AS_HELP_STRING([--with-macfat],[Build MacOSX 10.6 universal (32/64 bit intel) binary]),
	[
		if $with_universalsdk; then
			AC_MSG_WARN([--with-universalsdk and --with-macfat are mutually exclusive])
		fi
		case `uname -r` in
		10*)
			;;
		*)
			AC_MSG_WARN([--with-macfat only supported on MacOSX 10.6])
			;;
		esac
		case $withval in
		no)
			with_macfat=false
			;;
		*)
			with_macfat=true
			CFLAGS="-arch x86_64 -arch i386 ${sysroot} ${CFLAGS}"
			CXXFLAGS="-arch x86_64 -arch i386 ${sysroot} ${CXXFLAGS}"
			OBJCFLAGS="-arch x86_64 -arch i386 ${sysroot} ${OBJCFLAGS}"
			#LDFLAGS="-arch x86_64 -arch i386 ${sysroot} ${LDFLAGS}"
			# Need to pass these to recursive configure calls to (esp. libltdl)
			export CFLAGS
			ac_configure_args="$ac_configure_args --disable-dependency-tracking"
			;;
		esac
	],
	[
		with_macfat=false
	])

AC_MSG_RESULT($with_macfat)

#
#
# Do we want plugin support?
#
AC_MSG_CHECKING(for --with-ltdl-plugins)
AC_ARG_WITH([ltdl-plugins],
    AS_HELP_STRING([--without-ltdl-plugins],[Disable plugin support (based on libltdl)]),
    [
		case "${withval}" in
		yes)    ;;
		no)     unset LIBLTDL
				UNSET INCLTDL
				;;
		*)      AC_MSG_ERROR("No value allowed for --with-ltdl-plugins")
				;;
		esac
    ])
if test "x$LIBLTDL" = x;
then
    with_ltdl=false
else
    with_ltdl=true
    AC_DEFINE(WITH_LTDL_PLUGINS, 1, [Define to use libltdl-based plugins])
fi
AM_CONDITIONAL(WITH_LTDL_PLUGINS, test $with_ltdl = true)
AC_MSG_RESULT($with_ltdl)


# Do we want dummy plugins ?
#

AC_MSG_CHECKING(for --with-dummy-plugin)
AC_ARG_WITH([dummy-plugin],
    AS_HELP_STRING([--with-dummy-plugin],[Enable the dummy plugin (default: disabled)]),
	[
		case "${withval}" in
		yes)  	with_dummy_plugin=true
				;;
		no)		with_dummy_plugin=false
				;;
		*)		AC_MSG_ERROR("--with-dummy-plugin takes no argument")
				;;
		esac],
	[with_dummy_plugin=false])
AM_CONDITIONAL(WITH_DUMMY_PLUGIN, test x$with_dummy_plugin = xtrue)
AC_MSG_RESULT($with_dummy_plugin)

#
# Do we want SMIL 3.0 support?
#
test_smil30=true
AC_MSG_CHECKING(for --with-smil30)
AC_ARG_WITH([smil30],
    AS_HELP_STRING([--with-smil30],[Enable SMIL 3.0 constructs]),
    [with_smil30=${withval}],
    [with_smil30=yes])
if test "x$with_smil30" = xyes;
then
	AC_DEFINE(WITH_SMIL30, 1, [Define to enable SMIL 3.0 support])
	test_smil30=true
fi
AM_CONDITIONAL(WITH_SMIL30, test x$with_smil30 = xyes)
AC_MSG_RESULT($with_smil30)

#
# Do we want seamless playback support?
#
AC_MSG_CHECKING(for --with-seamless-playback)
AC_ARG_WITH([seamless-playback],
    AS_HELP_STRING([--with-seamless-playback],[Enable seamless audio/video playback]),
    [with_seamless=${withval}],
    [with_seamless=yes])
if test "x$with_seamless" = xyes;
then
    AC_DEFINE(WITH_SEAMLESS_PLAYBACK, 1, [Define to enable seamless playback support])
fi
AC_MSG_RESULT($with_seamless)

#
# Do we want clock resynchronisation?
#
AC_MSG_CHECKING(for --with-clock-sync)
AC_ARG_WITH([clock-sync],
    AS_HELP_STRING([--with-clock-sync],[Resynchronise presentation clock to audio clock]),
    [with_clock_sync=${withval}],
    [with_clock_sync=yes])
if test "x$with_clock_sync" = xyes;
then
    AC_DEFINE(WITH_CLOCK_SYNC, 1, [Define to enable resyncing presentation clock to audio clock])
fi
AC_MSG_RESULT($with_clock_sync)

#
# Do we want external DOM tree support?
#
test_dom=false
AC_MSG_CHECKING(for --with-external-dom)
AC_ARG_WITH([external-dom],
    AS_HELP_STRING([--without-external-dom],[Use the fast DOM tree implementation only]),
    [with_external_dom=${withval}],
    [with_external_dom=yes])
if test "x$with_external_dom" = xyes;
then
    AC_DEFINE(WITH_EXTERNAL_DOM, 1, [Define to enable external DOM tree support])
   test_dom=true
fi
AM_CONDITIONAL(WITH_EXTERNAL_DOM, test x$with_dom = xyes)
AC_MSG_RESULT($with_external_dom)

#
# Do we want overlay window support support?
#
test_overlay=false
AC_MSG_CHECKING(for --with-overlay-window)
AC_ARG_WITH([overlay-window],
    AS_HELP_STRING([--with-overlay-window],[Enable a secondary document overlaying the main document]),
    [with_overlay_window=${withval}],
    [with_overlay_window=yes])
if test "x$with_overlay_window" = xyes;
then
    AC_DEFINE(WITH_OVERLAY_WINDOW, 1, [Define to enable secondary document overlaying the main document])
   test_overlay=true
fi
AC_MSG_RESULT($with_overlay_window)


dnl
dnl Do we want special default layout for SMIL test suites ?
dnl
test_smil_test=false
AC_MSG_CHECKING(for --with-smil-test)
AC_ARG_WITH([smil-test],
    AS_HELP_STRING([--with-smil-test],[Enable special default layout for SMIL interop test suites (default: disabled)]),
	[
		case "${withval}" in
		yes)		with_smil_test=true
				;;
		no)		with_smil_test=false
				;;
		*)		AC_MSG_ERROR("--with-smil-test takes no argument")
				;;
		esac],
	[with_smil_test=false])
if test "x$with_smil_test" = xtrue;
then
    test_smil_test=true
    AC_DEFINE(WITH_SMIL_TEST, 1, [Define to enable special default layout for SMIL test suites])
fi
AM_CONDITIONAL(WITH_SMIL_TEST, test x$with_smil_test = xtrue)
AC_MSG_RESULT($with_smil_test)

dnl
dnl Check for expat
dnl
test_expat=false
expat_pkgconfig=false
AC_MSG_CHECKING(for expat XML handling library)
AC_ARG_WITH(expat,
	AS_HELP_STRING([--with-expat], [Turn on/off use of expat XML library]),
	[
		case "${withval}" in
		yes)
			test_expat=true
			expat_pkgconfig=true
			;;
		no)
			;;
		*)
		EXPAT_PREFIX=`cd ${withval} ; pwd`
			EXPAT_LIBS="-L$EXPAT_PREFIX/lib -lexpat"
			EXPAT_CFLAGS="-I$EXPAT_PREFIX/include"
			test_expat=true
			;;
		esac], 
	[expat_pkgconfig=true])

if $expat_pkgconfig; then
	PKG_CHECK_MODULES(EXPAT, [expat >= 2.0.0] , test_expat=true, test_expat=false)
	if $test_expat; then
		:
	else
		expat_warning="Expat not found through pkg-config. Check third_party_packages/readme.txt for instructions."
	fi
fi
if $test_expat; then
	AC_DEFINE(WITH_EXPAT, 1, [Define to enable expat XML parser])
fi
AC_SUBST(EXPAT_LIBS)
AC_SUBST(EXPAT_CFLAGS)
AM_CONDITIONAL(WITH_EXPAT, test x$test_expat = xtrue)
AC_MSG_RESULT($test_expat)

#
# Find xerces XML handling library
#
AC_MSG_CHECKING(for xerces XML handling library)

AC_ARG_WITH(xerces,
	AS_HELP_STRING([--with-xerces], [Turn on/off use of Xerces XML library]),
	[
		case "${withval}" in    
		yes) 
			test_xerces=true
			;;
		no)
			test_xerces=false
			;;
		*)
			AC_MSG_ERROR("No value allowed for --with-xerces")
			;;
		esac],
	[test_xerces=true])

if $test_xerces; then
	PKG_CHECK_MODULES(XERCES, xerces-c >= 3.0.0, test_xerces=true, test_xerces=false)
fi
if $test_xerces; then
	AC_DEFINE(WITH_XERCES, 1, [Define to enable xerces XML parser])
fi

AC_SUBST(XERCES_LIBS)
AC_SUBST(XERCES_INCLUDES)
AM_CONDITIONAL(WITH_XERCES, test x$test_xerces = xtrue)
AC_MSG_RESULT($test_xerces)

#
# Do we want xerces in a plugin only?
#
AC_MSG_CHECKING(for --with-xerces-plugin)
xerces_plugin=false

AC_ARG_WITH([xerces-plugin],
	AS_HELP_STRING([--with-xerces-plugin],[Put the xerces parser in a plugin]),
    [
		case "${withval}" in    
		yes)
			xerces_plugin=true
			;;
		no)
			xerces_plugin=false
			;;
		*)
			AC_MSG_ERROR("No value allowed for --with-xerces-plugin")
			;;
		esac])
     
if test x$xerces_plugin = xtrue;
then
	if test x$xerces = xfalse;
	then
		AC_MSG_ERROR("--with-xerces-plugin requires --with-xerces")
	fi
	# Disable builtin xerces support
	AM_CONDITIONAL(WITH_XERCES, test false)
else
	if test x$xerces = xtrue;
	then
	    AC_DEFINE(WITH_XERCES_BUILTIN, 1, [Define to include xerces parser in core])
	fi
fi
AM_CONDITIONAL(WITH_XERCES_PLUGIN, test x$xerces_plugin = xtrue)
AM_CONDITIONAL(WITH_XERCES_BUILTIN, test x$test_xerces = xtrue -a x$xerces_plugin = xfalse)
AC_MSG_RESULT($xerces_plugin)

#
# Test that we have at least one XML parser available
#
if test "x$test_expat" = "xfalse" -a "x$test_xerces" = "xfalse"; then
	AC_MSG_WARN([No XML parser configured - Use at least one of --with-expat or --with-xerces])
	xml_parser_warning="No XML parser configured - Use at least one of --with-expat or --with-xerces"
fi

#
AC_MSG_CHECKING(for --with-cocoa)
AC_ARG_WITH(cocoa,
     AS_HELP_STRING([--with-cocoa], [Turn on Cocoa support]),
     [
		case "${withval}" in
		yes)
			cocoa=true
			;;
		no)
			cocoa=false
			;;
		*)
			AC_MSG_ERROR(bad value ${withval} for --with-cocoa)
			;;
		esac
		with_frontend=true],
     [
		if test -d /System/Library/Frameworks/AppKit.framework; then
			cocoa=true
			with_frontend=true
		else
			cocoa=false
		fi
     ])
AM_CONDITIONAL(WITH_COCOA, test x$cocoa = xtrue)
AC_MSG_RESULT($cocoa)

#
AC_MSG_CHECKING(for --with-cg)
AC_ARG_WITH(cg,
     AS_HELP_STRING([--with-cg], [Turn on CoreGraphics support]),
     [
		case "${withval}" in
		yes)
			cg=true
			;;
		no)
			cg=false
			;;
		*)
			AC_MSG_ERROR(bad value ${withval} for --with-cg)
			;;
		esac],
     [cg=false])
if test x$cg = xtrue; then
    AC_DEFINE(WITH_CG, 1, [Define to enable CoreGraphics rendering])
fi
AM_CONDITIONAL(WITH_CG, test x$cg = xtrue)
AC_MSG_RESULT($cg)

AC_MSG_CHECKING(for --with-uikit)
AC_ARG_WITH(uikit,
     AS_HELP_STRING([--with-uikit], [Turn on UIKit support]),
     [
		case "${withval}" in
		yes)
			uikit=true
			;;
		no)
			uikit=false
			;;
		*)
			AC_MSG_ERROR(bad value ${withval} for --with-uikit)
			;;
		esac],[uikit=false])
if test x$uikit = xtrue; then
    if test ! x$cg = xtrue; then
        AC_MSG_ERROR(--with-uikit requires --with-cg)
    fi
    AC_DEFINE(WITH_UIKIT, 1, [Define to enable UIKit main program])
    with_frontend=true
fi
AM_CONDITIONAL(WITH_UIKIT, test x$uikit = xtrue)
AC_MSG_RESULT($uikit)


# Calling _AM_DEPENDENCIES here is a workaround for a bug
# in automake: ObjC support is incomplete. And manually
# doing AC_SUBST(OBJCDEPMODE) also fails.
# Some details are in
# http://mail.gnu.org/archive/html/automake/2003-04/msg00105.html
#
_AM_DEPENDENCIES([OBJC])
OBJCFLAGS="-ObjC++ ${OBJCFLAGS}"
AC_SUBST(OBJCFLAGS)

OBJC=$CC
AC_SUBST(OBJC)

dnl Testing for Qt
dnl ====================================================================

AC_MSG_CHECKING(for --with-qt)
test_qt=true
AC_ARG_WITH(qt,
	AS_HELP_STRING([--with-qt], [Enable/disable Qt frontend]),
     [
		if test "x$withval" = "xno"; then
			unset QTDIR
			test_qt=false
		fi
     ])
# qt4 is not supported yet
test_qt4=false
if $test_qt4; then
	PKG_CHECK_MODULES(QT,[Qt >= 4.0.0], test_qt4=true, test_qt4=false)
fi
if $test_qt; then
	PKG_CHECK_MODULES(QT,[qt-mt >= 3.3.0], test_qt=true, test_qt=false)
fi
if $test_qt; then
	QT_PREFIX="`pkg-config --variable=exec_prefix qt-mt`"
fi

if $test_qt; then
    with_frontend=true
fi
#if test "x$test_qt4" = "xtrue"; then
#   test_qt=$test_qt" Qt4 found which is not yet supported"
#fi
set +x
AC_MSG_RESULT($test_qt)
AM_CONDITIONAL(WITH_QT, test "x$test_qt" = "xtrue")
AC_SUBST(QT_CFLAGS)
AC_SUBST(QT_LIBS)
AC_SUBST(QT_PREFIX)


dnl Test for QT_HTML_WIDGET
dnl ====================================================================

AC_MSG_CHECKING(for --with-qt-html-widget)
qthtmlwidget=false     
AC_ARG_WITH(qt-html-widget,
     AS_HELP_STRING([--with-qt-html-widget], [Turn on Qt Html widget]),
     [ 
		case "${withval}" in
		yes) 
			qtthmlwidget=true
			;;
		*)  
			qtthmlwidget=false
			;;
		esac],
     [qthtmlwidget=false])
AM_CONDITIONAL(WITH_QT_HTML_WIDGET, test x$qthtmlwidget = xtrue)
if $qthtmlwidget; then
	if test ! -f /usr/include/kde/khtml_part.h; then
		AC_MSG_ERROR(--with-qt-html-widget without KDE include directory)
	fi
	CXXFLAGS="$CXXFLAGS -DWITH_HTML_WIDGET -DWITH_QT_HTML_WIDGET -I/usr/include/kde"
 	LIBS="$LIBS -lkdecore -lkhtml"
fi
AC_MSG_RESULT($qthtmlwidget)

dnl Test for SDL
dnl ======================================================================

test_sdl=true
AC_MSG_CHECKING(for sdl - Simple Direct Media layer)
AC_ARG_WITH(sdl,
	AS_HELP_STRING([--with-sdl], [Turn on/off SDL support]),
	[
		if test "x$withval" = "xno"; then
			test_sdl=false
		fi
	])
if $test_sdl; then
	# sdl-config will work for sdl 1.2.X
	if sdl-config --version > /dev/null; then
		SDL_CFLAGS=`sdl-config --cflags`
		SDL_LIBS=`sdl-config --libs`
	else
		# for 1.3 we need to use pkg-config
		PKG_CHECK_MODULES(SDL, [sdl >= 1.3.0], test_sdl=true, test_sdl=false)
	fi
fi
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AM_CONDITIONAL(WITH_SDL, test x$test_sdl = xtrue)
AC_MSG_RESULT($test_sdl)

dnl Testing for GTK
dnl ====================================================================

test_gtk=true
AC_MSG_CHECKING(for gtk - the GIMP Toolkit)
AC_ARG_WITH(gtk,
     AS_HELP_STRING([--with-gtk], [Enable/disable GTK support]),
     [
     	if test "x$withval" = "xno"; then
			test_gtk=false	
		  fi
     ])
if test "x$test_gtk" = "xtrue"; then
	PKG_CHECK_MODULES(GTK,[gtk+-2.0 >= 2.6.0 gthread-2.0 >= 2.2], test_gtk=true, test_gtk=false)
	if test $test_gtk = false; then
	   AC_MSG_WARN([Gtk+-2.0 or gthread-2.0 not found, or too old])
	else
		with_frontend=true
	fi
fi

AM_CONDITIONAL(WITH_GTK, test x$test_gtk = xtrue)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_MSG_RESULT($test_gtk)

dnl Testing for NOKIA770
dnl ====================================================================

test_nokia770=false
AC_MSG_CHECKING(for Nokia 770 Internet Tablet)
AC_ARG_WITH(nokia770,
     AS_HELP_STRING([--with-nokia770], [Enable/disable NOKIA770 support]),
     [
     	if test "x$withval" = "xyes"; then
			test_nokia770=true	
		  fi
     ])
if test "x$test_nokia770" = "xtrue"; then
	dnl	PKG_CHECK_MODULES(GTK,[gtk+-2.0 >= 2.6.0], test_nokia770=true, test_nokia770=false)
	if test "x$test_gtk" = "xfalse"; then
	   AC_MSG_ERROR(--with-nokia770 requires --with-gtk);
	fi
	PKG_CHECK_MODULES(DBUS, dbus-glib-1 >= 0.23.4)
	PKG_CHECK_MODULES(OSSO, libosso >= 0.8.4, test_nokia770=true, test_nokia770=false)
	PKG_CHECK_MODULES(HILDONBASE, hildon-base-lib >= 0.9.4, test_nokia770=true, test_nokia770=false)
	PKG_CHECK_MODULES(HILDONLIBS, hildon-libs >= 0.12.20, test_nokia770=true, test_nokia770=false)
	serviceentrydir=/usr/share/dbus-1/services
	AC_SUBST(OSSO_LIBS)
	AC_SUBST(OSSO_CFLAGS)
	AC_SUBST(HILDONBASE_LIBS)
	AC_SUBST(HILDONBASE_CFLAGS)
	AC_SUBST(HILDONLIBS_LIBS)
	AC_SUBST(HILDONLIBS_CFLAGS)

 fi

AM_CONDITIONAL(WITH_NOKIA770, test x$test_nokia770 = xtrue)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_MSG_RESULT($test_nokia770)


dnl Testing for gstreamer
dnl ====================================================================

test_gstreamer=false
AC_MSG_CHECKING(for gstreamer multimedia framework)
AC_ARG_WITH(gstreamer,
     AS_HELP_STRING([--with-gstreamer], [Enable/disable gstreamer support]),
     [
     	if test "x$withval" = "xyes"; then
			test_gstreamer=true	
      	fi
     ])
if test "x$test_gstreamer" = "xtrue"; then
	dnl	PKG_CHECK_MODULES(GTK,[gtk+-2.0 >= 2.6.0], test_gstreamer=true, test_gstreamer=false)
	if test "x$test_gtk" = "xfalse"; then
	   AC_MSG_ERROR(--with-gstreamer requires --with-gtk);
	fi
	PKG_CHECK_MODULES(GSTREAMER, gstreamer-0.10 >= 0.10.0, test_gstreamer=true, test_gstreamer=false)
	AC_SUBST(GSTREAMER_LIBS)
	AC_SUBST(GSTREAMER_CFLAGS)

 fi

AM_CONDITIONAL(WITH_GSTREAMER, test x$test_gstreamer = xtrue)
AC_MSG_RESULT($test_gstreamer)

#
# Test for live555.com library
#
test_live=false
live_root=
AC_MSG_CHECKING(for live555.com RTSP support)
AC_ARG_WITH(live,
	AS_HELP_STRING([--with-live], [Turn on live555.com rtsp support]),
	[
		case "${withval}" in
		yes)
			# Assume it is in third_party_packages/live
			live_root=`pwd`/third_party_packages/live
			test_live=true
			;;
		no)
			test_live=false
			;;
		*)
			test_live=true
			live_root=${witharg}
			;;
		esac
	],[
		if test -f `pwd`/third_party_packages/live/liveMedia/libliveMedia.a; then
			live_root=`pwd`/third_party_packages/live
			test_live=true
		fi
	])
if $test_live; then
	if test -f $live_root/liveMedia/libliveMedia.a; then
		LIVE_CFLAGS="-I$live_root/liveMedia/include -I$live_root/groupsock/include -I$live_root/BasicUsageEnvironment/include -I$live_root/UsageEnvironment/include"
		LIVE_LIBS="-L$live_root/liveMedia -lliveMedia -L$live_root/groupsock -lgroupsock -L$live_root/BasicUsageEnvironment -lBasicUsageEnvironment -L$live_root/UsageEnvironment -lUsageEnvironment"
	else
		AC_MSG_ERROR([Live555 not found in $live_root])
		test_live=false
	fi
fi

AM_CONDITIONAL(WITH_LIVE, test x$test_live = xtrue)
AC_SUBST(LIVE_CFLAGS)
AC_SUBST(LIVE_LIBS)
AC_MSG_RESULT($test_live)

dnl Testing for ffmpeg
dnl ======================================================================
##
# Find ffmpeg audio/video codec library
#
AC_MSG_CHECKING(for ffmpeg audio/video codec library)
test_ffmpeg=false
AC_ARG_WITH(ffmpeg,
	AS_HELP_STRING([--with-ffmpeg], [Turn on/off use of Ffmpeg audio/video codec library]),
	[
	case "${withval}" in    
	yes)
		test_ffmpeg=true
		;;
	no)
		test_ffmpeg=false
		;;
	*)
		AC_MSG_ERROR("Cannot supply value to --with-ffmpeg")
		;;
	esac],
	[test_ffmpeg=true])

if $test_ffmpeg; then
	PKG_CHECK_MODULES(LIBAVUTIL,[libavutil >= 49.7.0], , test_ffmpeg=false)
	PKG_CHECK_MODULES(LIBAVCODEC,[libavcodec >= 51.57.2], , test_ffmpeg=false)
	PKG_CHECK_MODULES(LIBAVFORMAT,[libavformat >= 52.14.0], , test_ffmpeg=false)
	PKG_CHECK_EXISTS([libswscale >= 0.7.1],
		PKG_CHECK_MODULES(LIBSWSCALE, [libswscale >= 0.7.1], test_ffmpeg_swscale=true, test_ffmpeg_swscale=false), 
		[test_ffmpeg_swscale=false])
	if $test_ffmpeg_swscale; then
		:
	else
		LIBSWSCALE_CFLAGS=""
		LIBSWSCALE_LIBS=""
	fi
	FFMPEG_CFLAGS="${LIBAVFORMAT_CFLAGS} ${LIBAVCODEC_CFLAGS} ${LIBAVUTIL_CFLAGS} ${LIBSWSCALE_CFLAGS}"
	FFMPEG_LIBS="${LIBAVFORMAT_LIBS} ${LIBAVCODEC_LIBS} ${LIBAVUTIL_LIBS} ${LIBSWSCALE_LIBS}"
fi
AC_SUBST(FFMPEG_CFLAGS)
AC_SUBST(FFMPEG_LIBS)
AM_CONDITIONAL(WITH_FFMPEG, test x$test_ffmpeg = xtrue)
AM_CONDITIONAL(WITH_FFMPEG_SWSCALE, test x$test_ffmpeg_swscale = xtrue)
AC_SUBST(WITH_FFMPEG)
AC_MSG_RESULT($test_ffmpeg)


dnl Testing for Python
dnl ======================================================================
AC_MSG_CHECKING(whether to build Python interface)
AC_ARG_WITH(python,
    AS_HELP_STRING([--with-python], [Build Python interface to Ambulant]),
    [
    	case "${withval}" in
        yes)
            PYTHON=`which python` 
            with_python=true
            ;;
        no)
            PYTHON=
            with_python=false
            ;;
        *)
            PYTHON=`which ${withval}`
            with_python=true
            ;;
    	esac],
    [with_python=false])
AM_CONDITIONAL(WITH_PYTHON, test x$with_python = xtrue)
AC_SUBST(PYTHON)
if test x$with_python = xtrue; then
	pythonprefix=`$PYTHON -c 'import sys; print sys.prefix'`
	if test ! -w $pythonprefix; then
		AC_MSG_WARN([Python installation not writeable, install may fail])
		python_warning="
You appear to have no permission to write into your Python installation.
This may mean 'make install' will fail, use 'make install -k' and manually
install the ambulant python module."
	fi
fi
AC_MSG_RESULT($with_python - $PYTHON)

# Do we want python plugins ?
#

AC_MSG_CHECKING(for --with-python-plugin)
AC_ARG_WITH([python-plugin],
    AS_HELP_STRING([--with-python-plugin],[Enable the python plugin (default: disabled)]),
    [
		case "${withval}" in
		yes)  	with_python_plugin=true
				;;
		no)		with_python_plugin=false
				;;
		*)		AC_MSG_ERROR("--with-python-plugin takes no argument")
				;;
		esac],
	[with_python_plugin=false])
	
if test x$with_python_plugin = xtrue;
then
	if test x$with_python = xfalse;
	then
		AC_MSG_ERROR("--with-python-plugin requires --with-python")
		with_python_plugin=false
	else
	   PYTHON_INCLUDES=-I`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_python_inc()"`
       # Trick to determine whether we're using a Mac framework build, in which
       # case we need to specify the library differently.
       case x$PYTHON_INCLUDES in
       x-I/Library*)
           PYTHON_LIBS="-framework Python" 
           ;;
       x-I/System/Library*)
           PYTHON_LIBS="-framework Python"
           ;;
       *)
           pylibdir=`$PYTHON -c 'from distutils.sysconfig import *; print parse_makefile(get_makefile_filename()).get("LIBPL")'`
           pyversion=`$PYTHON -c 'import distutils.sysconfig ; print distutils.sysconfig.get_python_version()'`
           PYTHON_LIBS="-L${libdir} -L${pylibdir} -lpython${pyversion}"
           ;;
       esac
	fi
fi

AC_SUBST(PYTHON_INCLUDES)
AC_SUBST(PYTHON_LIBS)
AM_CONDITIONAL(WITH_PYTHON_PLUGIN, test x$with_python_plugin = xtrue)
if test x$with_python_plugin = xtrue ; then
    AC_DEFINE(WITH_PYTHON_PLUGIN, 1, [Define to enable support for plugins in Python])
fi
AC_MSG_RESULT($with_python_plugin)

# Do we want the npambulant browser (firefox) plugin ?

AC_MSG_CHECKING(for --with-npambulant)
AC_ARG_WITH([npambulant],
    AS_HELP_STRING([--with-npambulant],[Enable building the Ambulant plugin for npapi compatible browsers, like firefox (default: disabled)]),
	[
		case "${withval}" in
		yes)  	
			with_npambulant=true
			;;
		no)	
			with_npambulant=false
			;;
		*)	
			AC_MSG_ERROR("--with-npambulant takes no argument")
			;;
		esac],
	[with_npambulant=false])

# when working with mozilla source trunk, uncomment next line
# XULRUNNER_ROOT=`pwd`/third_party_packages/mozilla/ff-opt-static/dist
if test x$with_npambulant = xtrue;
then
   if test -f `pwd`/third_party_packages/xulrunner-sdk/include/plugin/npapi.h; then
		# Require a xulrunner-sdk installation in third_party_packages
		withvalabs=`pwd`/third_party_packages/xulrunner-sdk
		# for mozilla source trunk, uncomment next line
		# withvalabs=`pwd`/third_party_packages/mozilla/ff-opt-static/dist
		XULRUNNER_ROOT=${withvalabs}
		XPIDL=${XULRUNNER_ROOT}/bin/xpidl
   elif test x`xulrunner --gre-version` = x1.9.0.6
   	then	# xulrunner is by default installed from fedora 10
		withvalabs=/usr
		XULRUNNER_ROOT=${withvalabs}
	     	XPIDL=

   else	AC_MSG_ERROR("--with-npambulant requires xulrunner-sdk installed in third_party_packages")
	XULRUNNER_ROOT=
	XPIDL=
	with_npambulant=false
   fi
fi
AC_SUBST(XULRUNNER_ROOT)
AC_SUBST(XPIDL)
AC_SUBST(NPAMBULANT_INCLUDES)
AC_SUBST(NPAMBULANT_LIBS)
AM_CONDITIONAL(WITH_NPAMBULANT, test x$with_npambulant = xtrue)
AC_MSG_RESULT($with_npambulant)

#
# If we use both npambulant and plugins, we link the plugins against the
# core shared library. Otherwise there is no need to do this.
#
AC_MSG_CHECKING([whether we should link against core ambulant shared lib (alternative is static)])
with_ambulant_shared_lib=false
case $host_os in
darwin*)
	with_ambulant_shared_lib=true;;
esac

if $with_npambulant; then
	if $with_ltdl; then
		with_ambulant_shared_lib=true
	fi
fi
AM_CONDITIONAL(WITH_AMBULANT_SHARED_LIB, $with_ambulant_shared_lib)
AC_MSG_RESULT($with_ambulant_shared_lib)

AC_MSG_CHECKING(for --with-webkit-dom)
AC_ARG_WITH([webkit-dom],
	AS_HELP_STRING([--with-webkit-dom],[Enable the WebKit DOM plugin (default: disabled)]),
	[
		case "${withval}" in
		yes)	
			with_webkit_dom=true
			;;
		no)		
			with-webkit_dom=false
			;;
		*)		
			AC_MSG_ERROR("--with-webkit-dom takes no argument")
			;;
		esac],
	[with_webkit_dom=false])
AM_CONDITIONAL(WITH_WEBKIT_DOM, test x$with_webkit_dom = xtrue)
AC_MSG_RESULT($with_webkit_dom)
#
# Test for pthreads. Modifed from http://www.gnu.org/software/ac-archive/htmldoc/acx_pthread.html
#
AC_DEFUN([ACX_PTHREAD], [
#AC_REQUIRE([AC_CANONICAL_HOST])
AC_LANG_PUSH([C])
acx_pthread_ok=no

# We used to check for pthread.h first, but this fails if pthread.h
# requires special compiler flags (e.g. on True64 or Sequent).
# It gets checked for in the link test anyway.

# First of all, check if the user has set any of the PTHREAD_LIBS,
# etcetera environment variables, and if threads linking works using
# them:
if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])
        AC_TRY_LINK_FUNC(pthread_join, acx_pthread_ok=yes)
        AC_MSG_RESULT($acx_pthread_ok)
        if test x"$acx_pthread_ok" = xno; then
                PTHREAD_LIBS=""
                PTHREAD_CFLAGS=""
        fi
        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"
fi

# We must check for the threads library under a number of different
# names; the ordering is very important because some systems
# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
# libraries is broken (non-POSIX).

# Create a list of thread flags to try.  Items starting with a "-" are
# C compiler flags, and other items are library names, except for "none"
# which indicates that we try without any flags at all.

acx_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt"

# The ordering *is* (sometimes) important.  Some notes on the
# individual items follow:

# pthreads: AIX (must check this before -lpthread)
# none: in case threads are in libc; should be tried before -Kthread and
#       other compiler flags to prevent continual compiler warnings
# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
# -pthreads: Solaris/gcc
# -mthreads: Mingw32/gcc, Lynx/gcc
# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
#      doesn't hurt to check since this sometimes defines pthreads too;
#      also defines -D_REENTRANT)
# pthread: Linux, etcetera
# --thread-safe: KAI C++

case "${host_cpu}-${host_os}" in
        *solaris*)

        # On Solaris (at least, for some versions), libc contains stubbed
        # (non-functional) versions of the pthreads routines, so link-based
        # tests will erroneously succeed.  (We need to link with -pthread or
        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
        # a function called by this macro, so we could check for that, but
        # who knows whether they'll stub that too in a future libc.)  So,
        # we'll just look for -pthreads and -lpthread first:

        acx_pthread_flags="-pthread -pthreads pthread -mt $acx_pthread_flags"
        ;;
esac

if test x"$acx_pthread_ok" = xno; then
for flag in $acx_pthread_flags; do

        case $flag in
                none)
                AC_MSG_CHECKING([whether pthreads work without any flags])
                ;;

                -*)
                AC_MSG_CHECKING([whether pthreads work with $flag])
                PTHREAD_CFLAGS="$flag"
                ;;

                *)
                AC_MSG_CHECKING([for the pthreads library -l$flag])
                PTHREAD_LIBS="-l$flag"
                ;;
        esac

        save_LIBS="$LIBS"
        save_CFLAGS="$CFLAGS"
        LIBS="$PTHREAD_LIBS $LIBS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Check for various functions.  We must include pthread.h,
        # since some functions may be macros.  (On the Sequent, we
        # need a special flag -Kthread to make this header compile.)
        # We check for pthread_join because it is in -lpthread on IRIX
        # while pthread_create is in libc.  We check for pthread_attr_init
        # due to DEC craziness with -lpthreads.  We check for
        # pthread_cleanup_push because it is one of the few pthread
        # functions on Solaris that doesn't have a non-functional libc stub.
        # We try pthread_create on general principles.
        AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]], [[pthread_t th; pthread_join(th, 0);
                     pthread_attr_init(0); pthread_cleanup_push(0, 0);
                     pthread_create(0,0,0,0); pthread_cleanup_pop(0); ]])],[acx_pthread_ok=yes],[])

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        AC_MSG_RESULT($acx_pthread_ok)
        if test "x$acx_pthread_ok" = xyes; then
                break;
        fi

        PTHREAD_LIBS=""
        PTHREAD_CFLAGS=""
done
fi

# Various other checks:
if test "x$acx_pthread_ok" = xyes; then
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Detect AIX lossage: threads are created detached by default
        # and the JOINABLE attribute has a nonstandard name (UNDETACHED).
        AC_MSG_CHECKING([for joinable pthread attribute])
        AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]], [[int attr=PTHREAD_CREATE_JOINABLE;]])],[ok=PTHREAD_CREATE_JOINABLE],[ok=unknown])
        if test x"$ok" = xunknown; then
                AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]], [[int attr=PTHREAD_CREATE_UNDETACHED;]])],[ok=PTHREAD_CREATE_UNDETACHED],[ok=unknown])
        fi
        if test x"$ok" != xPTHREAD_CREATE_JOINABLE; then
                AC_DEFINE(PTHREAD_CREATE_JOINABLE, $ok,
                          [Define to the necessary symbol if this constant
                           uses a non-standard name on your system.])
        fi
        AC_MSG_RESULT(${ok})
        if test x"$ok" = xunknown; then
                AC_MSG_WARN([we do not know how to create joinable pthreads])
        fi

        AC_MSG_CHECKING([if more special flags are required for pthreads])
        flag=no
        case "${host_cpu}-${host_os}" in
                *-aix* | *-freebsd*)     flag="-D_THREAD_SAFE";;
                *solaris* | *-osf* | *-hpux*) flag="-D_REENTRANT";;
        esac
        AC_MSG_RESULT(${flag})
        if test "x$flag" != xno; then
                PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
        fi

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        # More AIX lossage: must compile with cc_r
        AC_CHECK_PROG(PTHREAD_CC, cc_r, cc_r, ${CC})
else
        PTHREAD_CC="$CC"
fi

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_CC)

# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
if test x"$acx_pthread_ok" = xyes; then
        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])
        :
else
        acx_pthread_ok=no
        $2
fi
AC_LANG_POP([])
])dnl ACX_PTHREAD

ACX_PTHREAD
CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
AC_CONFIG_FILES([
libambulant.pc
ambulant.spec
])
AC_OUTPUT

dnl ============================================================================

echo "Attempting to fix libtool, assuming 2.2.6"
sh $srcdir/fixlibtool226.sh

echo "
ambulant-$AMBULANT_VERSION will be built with following parameters:

    targeted prefix:                ${prefix}
    compiler:                       ${CC}

    Enable external DOM:            ${test_dom}
    Enable SMIL 3.0:                ${test_smil30}
    Enable overlay window:          ${test_overlay}
    Build with seamless playback:   ${with_seamless}
    Build with audio clock sync:    ${with_clock_sync}
    Enable SMIL test layout:        ${test_smil_test}
    Build with Python support:      ${with_python}
    Build with Python plugin:       ${with_python_plugin}

    Use expat XML library:          ${test_expat}
    Use xerces XML library:         ${test_xerces}
    Enable Xerces as plugin:        ${xerces_plugin}
    Build with ffmpeg:              ${test_ffmpeg}
    Build with SDL:                 ${test_sdl}
    Build with live555.com RTSP:    ${test_live}
    Build with gstreamer:           ${test_gstreamer}

    Build Qt3 frontend:             ${test_qt}
    Build with GTK:                 ${test_gtk}
    Build with NOKIA770:            ${test_nokia770}

    Build with WebKit DOM plugin:   ${with_webkit_dom}
    Build Cocoa frontend:           ${cocoa}
    Build UIKit frontend:           ${uikit}
    Build OSX 10.4 universal:       ${with_universalsdk}
    Build OSX 10.6 universal:       ${with_macfat}

    Build with npambulant plugin:   ${with_npambulant}
    Use shared libs internally:     ${with_ambulant_shared_lib}
     "

if test "x$with_frontend" = "xfalse"; then
    AC_MSG_WARN([No GUI support, so no player will be built])
fi
AC_MSG_RESULT([$qt_warning]);
AC_MSG_RESULT([$ffmpeg_warning]);
AC_MSG_RESULT([$live_warning]);
AC_MSG_RESULT([$expat_warning]);
AC_MSG_RESULT([$python_warning]);
AC_MSG_RESULT([$xml_parser_warning]);
if test "x$test_ffmpeg_swscale" = "xtrue"; then
	AC_MSG_WARN([Built with ffmpeg libswscale, therefore under GPL license])
fi

