AC_INIT(ambulant, 1.9)
AC_CONFIG_SRCDIR(src/libambulant/get_version.cpp)
AM_INIT_AUTOMAKE
AMBULANT_VERSION=1.9

dnl =================================================================
FFMPEG_REQUIRED=0.4.8
QT_REQUIRED=3.3.4
GTK_REQUIRED=1.2.8

AC_SUBST(FFMPEG_REQUIRED)
AC_SUBST(QT_REQUIRED)

dnl ================================================================

AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_STDC_HEADERS
LT_AC_PROG_SED
am__api_version="1.9"
#
# Allow either included or standard ltdl
#
AC_WITH_LTDL
AC_LIBLTDL_CONVENIENCE
AC_LIBTOOL_DLOPEN
AC_LIB_LTDL
AC_PROG_LIBTOOL
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

AM_GNU_GETTEXT([external])
AC_CONFIG_FILES([Makefile po/Makefile.in
	m4/Makefile
	src/Makefile 
	src/libambulant/Makefile 
	src/player_unix/Makefile
	src/player_gtk/Makefile
	src/player_macosx/Makefile
	src/plugins/Makefile
	src/pyambulant/Makefile
	include/Makefile
	include/ambulant/Makefile
	include/ambulant/config/Makefile
	include/ambulant/config/compiler/Makefile
	include/ambulant/config/platform/Makefile
	include/ambulant/config/stdlib/Makefile
	include/ambulant/common/Makefile
	include/ambulant/compat/Makefile
	include/ambulant/lib/Makefile
	include/ambulant/lib/unix/Makefile
	include/ambulant/lib/win32/Makefile
	include/ambulant/mms/Makefile
	include/ambulant/smil2/Makefile
	include/ambulant/net/Makefile
	include/ambulant/gui/Makefile
	include/ambulant/gui/dg/Makefile
	include/ambulant/gui/dx/Makefile
	include/ambulant/gui/none/Makefile
	include/ambulant/gui/cocoa/Makefile
	include/ambulant/gui/qt/Makefile
	include/ambulant/gui/gtk/Makefile
	include/ambulant/gui/arts/Makefile
	include/ambulant/gui/SDL/Makefile
	include/ambulant/gui/gstreamer/Makefile
	third_party_packages/Makefile
	Documentation/Makefile
	Extras/Makefile])
	
#
# This variable records whether we have support for
# any windowing system (so we can give a warning at
# the end if not)
#
with_frontend=false

#
# Do we want MacOSX universal (ppc/intel) binary support?
#
AC_MSG_CHECKING(for --with-universalsdk)
AC_ARG_WITH(universalsdk,
    AC_HELP_STRING([--with-universalsdk], [Build MacOSX universal binary]),
[
    case $withval in
    yes)
        withval=/Developer/SDKs/MacOSX10.4u.sdk
        ;;
    esac
    case $withval in
    no)
        with_universalsdk=false
        ;;
    *)
        with_universalsdk=true
        CFLAGS="-arch ppc -arch i386 -isysroot ${withval} -I/usr/local/include ${CFLAGS}"
        CXXFLAGS="-arch ppc -arch i386 -isysroot ${withval} -I/usr/local/include ${CXXFLAGS}"
        OBJCFLAGS="-arch ppc -arch i386 -isysroot ${withval} -I/usr/local/include ${OBJCFLAGS}"
        #LDFLAGS="-arch ppc -arch i386 -isysroot ${withval} -L/usr/local/lib ${LDFLAGS}"
        ;;
    esac
],
[
    with_universalsdk=false
])
AC_MSG_RESULT($with_universalsdk)

#
#
# Do we have pkg-config?
#
#AC_MSG_CHECKING(for pkg-config)
#PKG_CHECK_MODULES(pkg-config,[pkg-config >= 0.18], pkg_config=true, pkg_config=false)
#AM_CONDITIONAL(WITH_PKG_CONFIG, test $pkg_config = true)
#AC_MSG_RESULT($pkg_config)
AC_CHECK_PROG(PKG_CONFIG,pkg-config,`which pkg-config`)

#
#
# Do we want plugin support?
#
AC_MSG_CHECKING(for --with-ltdl-plugins)
AC_ARG_WITH([ltdl-plugins],[
    AC_HELP_STRING([--without-ltdl-plugins],
                   [Disable plugin support (based on libltdl)])
    ],[
    case "${withval}" in
    yes)    ;;
    no)     unset LIBLTDL
            UNSET INCLTDL
            ;;
    *)      AC_MSG_ERROR("No value allowed for --with-ltdl-plugins")
            ;;
    esac
    ])
if test "x$LIBLTDL" = x;
then
    with_ltdl=false
else
    with_ltdl=true
    AC_DEFINE(WITH_LTDL_PLUGINS, 1, [Define to use libltdl-based plugins])
fi
AM_CONDITIONAL(WITH_LTDL_PLUGINS, test $with_ltdl = true)
AC_MSG_RESULT($with_ltdl)


# Do we want dummy plugins ?
#

AC_MSG_CHECKING(for --with-dummy-plugin)
AC_ARG_WITH([dummy-plugin],
    [AC_HELP_STRING([--with-dummy-plugin],[Enable the dummy plugin (default: disabled)])
	],[
	case "${withval}" in
	yes)  	with_dummy_plugin=true
			;;
	no)		with_dummy_plugin=false
			;;
	*)		AC_MSG_ERROR("--with-dummy-plugin takes no argument")
			;;
	esac],[
	with_dummy_plugin=false])
AM_CONDITIONAL(WITH_DUMMY_PLUGIN, test x$with_dummy_plugin = xtrue)
AC_MSG_RESULT($with_dummy_plugin)

#
# Do we want SMIL 3.0 WD support?
#
test_smil30=false
AC_MSG_CHECKING(for --with-smil30)
AC_ARG_WITH([smil30],[
    AC_HELP_STRING([--with-smil30],
                   [Enable SMIL 3.0 WD constructs])
    ],[with_smil30=${withval}], [with_smil30=yes])
if test "x$with_smil30" = xyes;
then
    AC_DEFINE(WITH_SMIL30, 1, [Define to enable SMIL 3.0 WD support])
   test_smil30=true
fi
AM_CONDITIONAL(WITH_SMIL30, test x$with_smil30 = xyes)
AC_MSG_RESULT($with_smil30)

#
# Do we want external DOM tree support?
#
test_dom=false
AC_MSG_CHECKING(for --with-external-dom)
AC_ARG_WITH([external-dom],[
    AC_HELP_STRING([--without-external-dom],
                   [Use the fast DOM tree implementation only])
    ],[with_external_dom=${withval}], [with_external_dom=yes])
if test "x$with_external_dom" = xyes;
then
    AC_DEFINE(WITH_EXTERNAL_DOM, 1, [Define to enable external DOM tree support])
   test_dom=true
fi
AC_MSG_RESULT($with_external_dom)

#
# Do we want overlay window support support?
#
test_overlay=false
AC_MSG_CHECKING(for --with-overlay-window)
AC_ARG_WITH([overlay-window],[
    AC_HELP_STRING([--with-overlay-window],
                   [Enable a secondary document overlaying the main document])
    ],[with_overlay_window=${withval}], [with_overlay_window=yes])
if test "x$with_overlay_window" = xyes;
then
    AC_DEFINE(WITH_OVERLAY_WINDOW, 1, [Define to enable secondary document overlaying the main document])
   test_overlay=true
fi
AC_MSG_RESULT($with_overlay_window)


dnl
dnl Do we want special default layout for SMIL test suites ?
dnl
test_smil_test=false
AC_MSG_CHECKING(for --with-smil-test)
AC_ARG_WITH([smil-test],
    [AC_HELP_STRING([--with-smil-test],[Enable special default layout for SMIL interop test suites (default: disabled)])
	],[
	case "${withval}" in
	yes)		with_smil_test=true
			;;
	no)		with_smil_test=false
			;;
	*)		AC_MSG_ERROR("--with-smil-test takes no argument")
			;;
	esac],[
	with_smil_test=false])
if test "x$with_smil_test" = xtrue;
then
    test_smil_test=true
    AC_DEFINE(WITH_SMIL_TEST, 1, [Define to enable special default layout for SMIL test suites])
fi
AM_CONDITIONAL(WITH_SMIL_TEST, test x$with_smil_test = xtrue)
AC_MSG_RESULT($with_smil_test)

dnl
dnl Check for external/internal copy of expat
dnl
test_expat=true
AC_MSG_CHECKING(for expat XML handling library)
EXPAT_PREFIX=third_party_packages/expat-unix
AC_ARG_WITH(expat,
	[  --with-expat		Turn on/off use of expat XML library],
	[
	   case "${withval}" in
	   yes) EXPAT_PREFIX=third_party_packages/expat-unix ;;
	   no) EXPAT_PREFIX=""
	       test_expat=false
	       ;;
	   *)  EXPAT_PREFIX=${withval} ;;
	   esac
], [EXPAT_PREFIX=third_party_packages/expat-unix])

dnl test for slurped version first
dnl
if test "x$test_expat" = "xtrue"; then
	if test -f "$EXPAT_PREFIX";	
	then
          :
	else
	AC_TRY_COMPILE(
	    [#include <expat.h>],[
	    #if !(XML_MAJOR_VERSION > 1 || XML_MINOR_VERSION > 95 || XML_MICRO_VERSION >= 7)
	    #error Need at least expat 1.95.7
	    #endif],
	    [test_expat=true
	    if test -f /usr/local/include/expat.h; then
	        EXPAT_PREFIX=/usr/local
	    else
	        EXPAT_PREFIX=/usr
	    fi
	    ])
	fi
fi

if test "x$test_expat" = "xtrue"; then
	if test  -f $EXPAT_PREFIX/include/expat.h; then
		EXPAT_PREFIX=`cd $EXPAT_PREFIX; pwd`
		EXPAT_LIBS="-L$EXPAT_PREFIX/lib -lexpat"
		EXPAT_INCLUDES="-I$EXPAT_PREFIX/include"
		AC_DEFINE(WITH_EXPAT, 1, [Define to enable expat XML parser])
		expat_path="$EXPAT_PREFIX"
	fi
fi

if test "x$test_expat" = "xfalse"; then
	AC_MSG_WARN([No expat found)])
        expat_warning="
Unable to find a version of expat to use. You either need to have expat installed at in /usr or /usr/local or installed in third_party_packages/expat-unix inside the ambulant source structure. If you are using another XML parser, like Xerces with Ambulant you can ignore this message."
unset EXPAT_PREFIX
fi

AC_SUBST(EXPAT_PREFIX)
AC_SUBST(EXPAT_LIBS)
AC_SUBST(EXPAT_INCLUDES)
AM_CONDITIONAL(WITH_EXPAT, test x$test_expat = xtrue)
AC_MSG_RESULT($test_expat)

#
# Find xerces XML handling library
#
test_xerces=false
AC_MSG_CHECKING(for xerces XML handling library)

AC_ARG_WITH(xerces,
	[  --with-xerces		Turn on/off use of Xerces XML library],
	[
    case "${withval}" in    
     yes) test_xerces=true;;
     no)  test_xerces=false;;
     *)   test_xerces=true
          XERCES_PREFIX=$withval
          ;;
    esac
])
dnl test for slurped version first
dnl
if test "x$test_xerces" = "xtrue"; then
	if test "x$XERCES_PREFIX" = "x";	
	then
          XERCES_PREFIX=third_party_packages/xerces-unix
	fi
fi	
if test "x$test_xerces" = "xtrue";
then if test -f $XERCES_PREFIX/include/xercesc/parsers/SAXParser.hpp;
    then
        XERCES_PREFIX=`cd $XERCES_PREFIX; pwd`
	    XERCES_LIBS="-L$XERCES_PREFIX/lib -lxerces-c"
	    XERCES_INCLUDES="-I$XERCES_PREFIX/include"
	    AC_DEFINE(WITH_XERCES, 1, [Define to enable xerces XML parser])
    else 
        AC_MSG_ERROR([xerces not found in $XERCES_PREFIX])
        test_xerces=false
        unset XERCES_PREFIX
        unset XERCES_LIBS
        unset XERCES_INCLUDES
     fi
else
    unset XERCES_PREFIX
    unset XERCES_LIBS
    unset XERCES_INCLUDES
fi
AC_SUBST(XERCES_PREFIX)
AC_SUBST(XERCES_LIBS)
AC_SUBST(XERCES_INCLUDES)
AM_CONDITIONAL(WITH_XERCES, test x$test_xerces = xtrue)
AC_MSG_RESULT($test_xerces)

#
# Do we want xerces in a plugin only?
#
AC_MSG_CHECKING(for --with-xerces-plugin)
xerces_plugin=false

AC_ARG_WITH([xerces-plugin],[
	AC_HELP_STRING([--with-xerces-plugin],
                   [Put the xerces parser in a plugin])
    ],[
    case "${withval}" in    
     yes) xerces_plugin=true;;
     no)  xerces_plugin=false ;;
     *)   AC_MSG_ERROR("No value allowed for --with-xerces-plugin");;
     esac])
     
if test x$xerces_plugin = xtrue;
then
	if test x$xerces = xfalse;
	then
		AC_MSG_ERROR("--with-xerces-plugin requires --with-xerces")
	fi
	# Disable builtin xerces support
	AM_CONDITIONAL(WITH_XERCES, test false)
else
	if text x$xerces = xtrue;
	then
	    AC_DEFINE(WITH_XERCES_BUILTIN, 1, [Define to include xerces parser in core])
	fi
fi
AM_CONDITIONAL(WITH_XERCES_PLUGIN, test x$xerces_plugin = xtrue)
AM_CONDITIONAL(WITH_XERCES_BUILTIN, test x$test_xerces = xtrue -a x$xerces_plugin = xfalse)
AC_MSG_RESULT($xerces_plugin)

#
# Test that we have at least one XML parser available
#
if test "x$test_expat" = "xfalse" -a "x$test_xerces" = "xfalse"; then
	AC_MSG_ERROR([No XML parser configured - Use at least one of --with-expat or --with-xerces])
fi

#
AC_MSG_CHECKING(for --with-cocoa)
AC_ARG_WITH(cocoa,
     [  --with-cocoa		Turn on Cocoa support],
     [case "${withval}" in
       yes) cocoa=true ;;
       no)  cocoa=false ;;
       *) AC_MSG_ERROR(bad value ${withval} for --with-cocoa) ;;
     esac
     gui_toolkit_found=true],[
     if test -d /System/Library/Frameworks/AppKit.framework; then
       cocoa=true
       gui_toolkit_found=true
     else
       cocoa=false
     fi
     ])
AM_CONDITIONAL(WITH_COCOA, test x$cocoa = xtrue)
AC_MSG_RESULT($cocoa)

# Calling _AM_DEPENDENCIES here is a workaround for a bug
# in automake: ObjC support is incomplete. And manually
# doing AC_SUBST(OBJCDEPMODE) also fails.
# Some details are in
# http://mail.gnu.org/archive/html/automake/2003-04/msg00105.html
#
_AM_DEPENDENCIES([OBJC])
OBJCFLAGS="-ObjC++ ${OBJCFLAGS}"
AC_SUBST(OBJCFLAGS)

OBJC=$CC
AC_SUBST(OBJC)

# Qtopia is checked before Qt, because on an embedded system Qt configures
# different: QT_THREAD_SUPPORT is off
AC_MSG_CHECKING(for --with-qtopia (cross compilation for Sharp SL-5600 Zaurus))
QTOPIA_PREFIX=
AC_ARG_WITH(qtopia,
     [  --with-qtopia		Enable/disable Qtopia support (cross compilation for Sharp SL-5600 Zaurus)],
     [case "${withval}" in
       yes) qtopia=true
		QTDIR=/opt/Qtopia/sharp
       		QTOPIA_PREFIX=$QTDIR
       		;;
       no)  qtopia=false
       		;;
       *) 	qtopia=true
       		QTOPIA_PREFIX=${withval}
       		;;
     esac],[
     case x$QTOPIA in
     x)	qtopia=false
     	;;
     *) qtopia=true
     	QTOPIA_PREFIX=$QTOPIA
     	;;
     esac])
AM_CONDITIONAL(WITH_QTOPIA, test x$qtopia = xtrue)
if test x$qtopia = xtrue -a x$QTOPIA_PREFIX = x; then
	AC_MSG_ERROR(--with-qtopia without valid QTOPIA_PREFIX directory)
fi
if test x$qtopia = xtrue; then
  with_frontend=true
  QT_PREFIX=$QTOPIA_PREFIX
  CXXFLAGS="-fno-rtti -pipe -DQT_QWS_EBX -DQT_QWS_CUSTOM -DQWS $CXXFLAGS" 
  # flags added for ffmpeg_datasource.cpp
  CXXFLAGS="-D_ISOC99_SOURCE=1 -D_BSD_SOURCE=1 $CXXFLAGS" 
  AC_MSG_NOTICE(
[For Sharp SL-5600: qtopia-free-1.5.0 is required (/opt/Qtopia)
arm-linux-g++ cross compiler (2.95) must have been installed (/opt/Embedex/tools/bin)
PATH should be prepended: export PATH=/opt/Qtopia/sharp/bin:/opt/Embedix/tools/bin:\$PATH
expat must have been cross-compiled and installed in third_party_packages/expat-unix
configure with: ./configure --build=`config.guess` --host=arm-linux])
fi
AC_MSG_RESULT($qtopia)

dnl Testing for Qt
dnl ====================================================================

AC_MSG_CHECKING(for --with-qt)
test_qt=true
AC_ARG_WITH(qt,[  --with-qt		Enable/disable Qt frontend],
     [if test "x$withval" = "xno"; then
	      unset QTDIR
	      test_qt=false
	fi
     ])
if test "x$test_qt" = "xtrue"; then
	PKG_CHECK_MODULES(QT,[qt-mt >= 3.3.0], test_qt=true, test_qt=false)
fi

if test "x$test_qt" = "xtrue"; then
	LIBQT_INCLUDES="$QT_CFLAGS -DHAVE_LIBQT=1"
	LIBQT_LIBS="$QT_LIBS"
	LIBQTPKG="libqt"
	QT_PREFIX="`pkg-config --variable=exec_prefix qt-mt`"
elif test "x$QTDIR" != "x"; then
     AC_MSG_NOTICE([Old-style qt configuration, Qt directory in QTDIR environment variable])
    test_qt=true
	LIBQT_INCLUDES="$QT_CFLAGS -DHAVE_LIBQT=1"
	LIBQT_LIBS="$QT_LIBS"
	LIBQTPKG="libqt"
	QT_PREFIX="$QTDIR"
fi

if test "x$test_qt" = "xtrue"; then
    with_frontend=true
fi

AC_MSG_RESULT($test_qt)
AM_CONDITIONAL(WITH_QT, test "x$test_qt" = "xtrue")
AC_SUBST(LIBQTPKG)
AC_SUBST(LIBQT_INCLUDES)
AC_SUBST(LIBQT_LIBS)
AC_SUBST(QT_PREFIX)


dnl Test for QT_HTML_WIDGET
dnl ====================================================================

AC_MSG_CHECKING(for --with-qt-html-widget)
qtthmlwidget=false     
AC_ARG_WITH(qt-html-widget,
     [  --with-qt-html-widget	Turn on Qt Html widget],
     [ case "${withval}" in
       yes) qtthmlwidget=true
                ;;
       *)  qtthmlwidget=false
                ;;
     esac],[
     	qtthmlwidget=false     
     ])
echo qtthmlwidget=$qtthmlwidget
AM_CONDITIONAL(WITH_QT_HTML_WIDGET, test x$qtthmlwidget = xtrue)
if test x$qtthmlwidget = xtrue; then
	if test ! -f /usr/include/kde/khtml_part.h;
	then AC_MSG_ERROR(--with-qt-html-widget without KDE include directory);
	fi
	CXXFLAGS="$CXXFLAGS -DWITH_HTML_WIDGET -DWITH_QT_HTML_WIDGET -I/usr/include/kde"
 	LIBS="$LIBS -lkdecore -lkhtml"
fi
AC_MSG_RESULT($qtthmlwidget)

dnl Test for SDL
dnl ======================================================================

test_sdl=true
AC_MSG_CHECKING(for sdl - Simple Direct Media layer)
AC_ARG_WITH(sdl,
     [  --with-sdl		Turn on/off SDL support],
     [if test "x$withval" = "xno"; then
	test_sdl=false
  fi])
if test "x$test_sdl" = "xtrue"-a sdl-config --libs > /dev/null 2>&1; then
     test_sdl=true
     else
     test_sdl=false
fi
AM_CONDITIONAL(WITH_SDL, test x$test_sdl = xtrue)
AC_MSG_RESULT($test_sdl)

dnl Testing for GTK
dnl ====================================================================

test_gtk=true
AC_MSG_CHECKING(for gtk - the GIMP Toolkit)
AC_ARG_WITH(gtk,
     [  --with-gtk		Enable/disable GTK support],
     [if test "x$withval" = "xno"; then
		test_gtk=false	
      fi
     ])
if test "x$test_gtk" = "xtrue"; then
	PKG_CHECK_MODULES(GTK,[gtk+-2.0 >= 2.6.0 gthread-2.0 >= 2.2], test_gtk=true, test_gtk=false)
	GTK_PREFIX="`pkg-config --variable=exec_prefix gtk+-2.0 glib-2.0 gthread-2.0`"
	if test $test_gtk = false; then
	   AC_MSG_WARN([Gtk+-2.0 or gthread-2.0 not found, or too old])
	fi
fi

AM_CONDITIONAL(WITH_GTK, test x$test_gtk = xtrue)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_PREFIX)
AC_MSG_RESULT($test_gtk)

dnl Testing for NOKIA770
dnl ====================================================================

test_nokia770=false
AC_MSG_CHECKING(for Nokia 770 Internet Tablet)
AC_ARG_WITH(nokia770,
     [  --with-nokia770		Enable/disable NOKIA770 support],
     [if test "x$withval" = "xyes"; then
		test_nokia770=true	
      fi
     ])
if test "x$test_nokia770" = "xtrue"; then
dnl	PKG_CHECK_MODULES(GTK,[gtk+-2.0 >= 2.6.0], test_nokia770=true, test_nokia770=false)
dnl	GTK_PREFIX="`pkg-config --variable=exec_prefix gtk+-2.0`"
	if test "x$test_gtk" = "xfalse"; then
	   AC_MSG_ERROR(--with-nokia770 requires --with-gtk);
	fi
	PKG_CHECK_MODULES(DBUS, dbus-glib-1 >= 0.23.4)
	PKG_CHECK_MODULES(OSSO, libosso >= 0.8.4, test_nokia770=true, test_nokia770=false)
	PKG_CHECK_MODULES(HILDONBASE, hildon-base-lib >= 0.9.4, test_nokia770=true, test_nokia770=false)
	PKG_CHECK_MODULES(HILDONLIBS, hildon-libs >= 0.12.20, test_nokia770=true, test_nokia770=false)
	serviceentrydir=/usr/share/dbus-1/services
	AC_SUBST(OSSO_LIBS)
	AC_SUBST(OSSO_CFLAGS)
	AC_SUBST(HILDONBASE_LIBS)
	AC_SUBST(HILDONBASE_CFLAGS)
	AC_SUBST(HILDONLIBS_LIBS)
	AC_SUBST(HILDONLIBS_CFLAGS)

 fi

AM_CONDITIONAL(WITH_NOKIA770, test x$test_nokia770 = xtrue)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_PREFIX)
AC_MSG_RESULT($test_nokia770)


dnl Testing for gstreamer
dnl ====================================================================

test_gstreamer=false
AC_MSG_CHECKING(for gstreamer multimedia framework)
AC_ARG_WITH(gstreamer,
     [  --with-gstreamer		Enable/disable gstreamer support],
     [if test "x$withval" = "xyes"; then
		test_gstreamer=true	
      fi
     ])
if test "x$test_gstreamer" = "xtrue"; then
dnl	PKG_CHECK_MODULES(GTK,[gtk+-2.0 >= 2.6.0], test_gstreamer=true, test_gstreamer=false)
	if test "x$test_gtk" = "xfalse"; then
	   AC_MSG_ERROR(--with-gstreamer requires --with-gtk);
	fi
	PKG_CHECK_MODULES(GSTREAMER, gstreamer-0.10 >= 0.10.0, test_gstreamer=true, test_gstreamer=false)
	AC_SUBST(GSTREAMER_LIBS)
	AC_SUBST(GSTREAMER_CFLAGS)

 fi

AM_CONDITIONAL(WITH_GSTREAMER, test x$test_gstreamer = xtrue)
AC_SUBST(GSTREAMER_PREFIX)
AC_MSG_RESULT($test_gstreamer)

#
# Test for arts 
#
test_arts=false dnl set to false until fixed
AC_MSG_CHECKING(for arts soundsystem)
AC_ARG_WITH(arts,
     [  --with-arts		Turn on aRts (basic) support (currently broken) ],
     [case "${withval}" in
       yes) arts=true
                ;;
       no)  arts=false
                ;;
       *)   AC_MSG_ERROR(--with-arts takes no argument - it uses artsc-config)
                ;;
     esac],[
     	arts=false
	test_arts=false
     ])
AM_CONDITIONAL(WITH_ARTS, test x$arts = xtrue)
AC_MSG_RESULT($arts)
#
# Test for live555.com library
#
test_live=true
AC_MSG_CHECKING(for live555.com RTSP support)
AC_ARG_WITH(live,
	[  --with-live		Turn on live555.com rtsp support],
	[if test "x$withval" = "xno"; then
		test_live=false
	 fi
	])
if test "x$test_live" = "xtrue"; then
   if test -f `pwd`/third_party_packages/live/liveMedia/libliveMedia.a; then
		# Prefer an live installation in third_party_packages
		withvalabs=`pwd`/third_party_packages/live
		LIVE_ROOT=${withvalabs}
   else
	test_live=false
   fi
fi
if test "x$test_live" = "xfalse"; then
	AC_MSG_WARN([live555.com RTSP support not enabled)])
        live_warning="
live555.com not found. You have to place a copy of live555.com libraries within the third_party_packages directory in your ambulant source tree to enable RTSP with it"
fi

AM_CONDITIONAL(WITH_LIVE, test x$test_live = xtrue)
AC_SUBST(LIVE_ROOT)
AC_MSG_RESULT(live555.com library found - $test_live)

#
# Test for ffmpeg
#
# XXXX FFmpeg installation is quirky. We currently support the following,
# in (somewhat) preferred order:
# - a pkg-config enabled ffmpeg, with module name "ffmpeg"
# - a pre-built ffmpeg from CVS in third_party_packages/ffmpeg-cvs
# - a pre-built ffmpeg (any version) with the pathname passed to --with-ffmpeg
# - a redhat/fedora installed one.

test_ffmpeg=true
AC_ARG_WITH(ffmpeg,
	[  --with-ffmpeg		Turn on/off ffmpeg audio decoders],
	[if test "x$withval" = "xno"; then
	  test_ffmpeg=false
fi
])

dnl old tests which can hopefully be deemded redundant 
dnl at some point
dnl ====================================================
FFMPEG_CFLAGS=
FFMPEG_LIBS=

if test "x$test_ffmpeg" = "xtrue"; then
        PKG_CHECK_MODULES(LIBAVCODEC,[libavcodec >= 0.4.9], test_ffmpeg=true, test_ffmpeg=manual)
fi
if test "x$test_ffmpeg" = "xtrue"; then
        PKG_CHECK_MODULES(LIBAVFORMAT,[libavformat >= 0.4.9], test_ffmpeg=true, test_ffmpeg=manual)
fi
if test "x$test_ffmpeg" = "xtrue"; then
        PKG_CHECK_MODULES(LIBAVUTIL,[libavutil >= 0.4.9], test_ffmpeg=true, test_ffmpeg=manual)
	FFMPEG_CFLAGS="${LIBAVFORMAT_CFLAGS} ${LIBAVCODEC_CFLAGS} ${LIBAVUTIL_CFLAGS}"
	FFMPEG_LIBS="${LIBAVFORMAT_LIBS} ${LIBAVCODEC_LIBS} ${LIBAVUTIL_LIBS}"
        inst_style="found through pkgconfig"        
fi


dnl
dnl Need to check for post 0.4.9 cvs-style pkg-config support here too
dnl

dnl test for slurped version (default cvs, otherwise use --with-ffmpeg argument)
if test "x$test_ffmpeg" = "xmanual"; then
    if test -f `pwd`/third_party_packages/ffmpeg-cvs/libavcodec/avcodec.h; then
        withval=third_party_packages/ffmpeg-cvs
    fi
	if test -f ${withval}/libavcodec/avcodec.h; 	then
			withvalabs=`cd ${withval}; pwd`
			FFMPEG_CFLAGS="-I${withvalabs}/libavcodec -I${withvalabs}/libavformat"
			FFMPEG_LIBS="-L${withvalabs}/libavformat -lavformat -L${withvalabs}/libavcodec -lavcodec"
			dnl
			dnl See whether this ffmpeg version has libavutil
			dnl
			if test -f ${withvalabs}/libavutil/avutil.h; then
			    FFMPEG_CFLAGS="${FFMPEG_CFLAGS} -I${withvalabs}/libavutil"
			    FFMPEG_LIBS="${FFMPEG_LIBS} -L${withvalabs}/libavutil -lavutil"
			fi
			test_ffmpeg=true
			ffmpeg_path="$withvalabs"
			inst_style="Ambulant included version"
	 else
		if test -f /usr/include/ffmpeg/avcodec.h; then
		  	FFMPEG_CFLAGS=-I/usr/include/ffmpeg
		  	FFMPEG_LIBS="-lavformat -lavcodec"
			test_ffmpeg=true
			inst_style="RedHat/Fedora type install"
		else
			test_ffmpeg=false
			inst_style="not found"
		fi
	 fi
fi	
 
if test "x$test_ffmpeg" = "xfalse"; then
	AC_MSG_WARN([ffmpeg support not enabled])
        ffmpeg_warning="
ffmpeg not found or disabled. Building without ffmpeg (which means you limited media support)"

fi
AM_CONDITIONAL(WITH_FFMPEG, test "x$test_ffmpeg" = "xtrue")
AC_SUBST(FFMPEG_CFLAGS)
AC_SUBST(FFMPEG_LIBS)
AC_MSG_RESULT(Discovered FFMPEG version to use - $inst_style)

dnl Testing for Dirac
dnl ======================================================================

AC_MSG_CHECKING(for Dirac support)
AC_ARG_WITH(dirac,
    [  --with-dirac		Turn on Dirac video codec if ffmpeg is enabled],
    [case "${withval}" in
        yes) dirac=true ;;
        no) dirac=false ;;
        *) AC_MSG_ERROR(--with-dirac takes no argument - it uses pkg-config) ;;
    esac], [
        dirac=false
    ])
AM_CONDITIONAL(WITH_DIRAC, test x$dirac = xtrue)
AC_MSG_RESULT($dirac)

dnl Testing for FAAD
dnl ======================================================================

AC_MSG_CHECKING(for FAAD support)
AC_ARG_WITH(faad,
    [  --with-faad		Turn on FAAD audio decoder if ffmpeg is enabled],
    [case "${withval}" in
        yes) faad=true; withval="/usr/local/include" ;;
        no) faad=false ;;
        *) if test "x$withval" = "x"; then faad=false; else faad=true; fi ;;
    esac], [
        faad=false
    ])
if test "x$faad" = "xtrue"; then
        withvalabs="?"
	FAAD_PREFIX="?"
	if test -f `pwd`/third_party_packages/faad/include/faad.h; then
		# Prefer a faad installation in third_party_packages
		withvalabs=`pwd`/third_party_packages/faad
		FAAD_PREFIX=${withvalabs}
	fi
	if test x$FAAD_PREFIX = "x?"; then
		if test -f ${withval}/include/faad.h; then
			withvalabs=$withval
			FAAD_PREFIX=${withvalabs}
		fi
	fi
	if  test x$FAAD_PREFIX = "x?"; then
		faad=false;
	elif test "x$test_ffmpeg" = "xfalse"; then
	        AC_MSG_ERROR("ffmpeg not found or disabled: FAAD support cannot be enabled")
	else 
		FFMPEG_CFLAGS="-I${FAAD_PREFIX}/include $FFMPEG_CFLAGS"
		FFMPEG_LIBS="-I${FAAD_PREFIX}/lib -lfaad $FFMPEG_LIBS"
	fi
fi
AM_CONDITIONAL(WITH_FAAD, test x$faad = xtrue)
AC_MSG_RESULT($faad)

dnl Testing for Python
dnl ======================================================================
AC_MSG_CHECKING(whether to build Python interface)
AC_ARG_WITH(python,
    [  --with-python		Build Python interface to Ambulant],
    [case "${withval}" in
        yes)
            PYTHON=`which python` 
            with_python=true
            ;;
        no)
            PYTHON=
            with_python=false
            ;;
        *)
            PYTHON=`which ${withval}`
            with_python=true
            ;;
    esac], [
        with_python=false
    ])
AM_CONDITIONAL(WITH_PYTHON, test x$with_python = xtrue)
AC_SUBST(PYTHON)
AC_MSG_RESULT($with_python - $PYTHON)

# Do we want python plugins ?
#

AC_MSG_CHECKING(for --with-python-plugin)
AC_ARG_WITH([python-plugin],
    [AC_HELP_STRING([--with-python-plugin],[Enable the python plugin (default: disabled)])
	],[
	case "${withval}" in
	yes)  	with_python_plugin=true
			;;
	no)		with_python_plugin=false
			;;
	*)		AC_MSG_ERROR("--with-python-plugin takes no argument")
			;;
	esac],[
	with_python_plugin=false])
	
if test x$with_python_plugin = xtrue;
then
	if test x$with_python = xfalse;
	then
		AC_MSG_ERROR("--with-python-plugin requires --with-python")
		with_python_plugin=false
	else
	   PYTHON_INCLUDES=-I`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_python_inc()"`
       # Trick to determine whether we're using a Mac framework build, in which
       # case we need to specify the library differently.
       case x$PYTHON_INCLUDES in
       x-I/Library*)
           PYTHON_LIBS="-framework Python" 
           ;;
       x-I/System/Library*)
           PYTHON_LIBS="-framework Python"
           ;;
       *)
           pylibdir=`$PYTHON -c 'from distutils.sysconfig import *; print parse_makefile(get_makefile_filename()).get("LIBPL")'`
           pyversion=`$PYTHON -c 'import distutils.sysconfig ; print distutils.sysconfig.get_python_version()'`
           PYTHON_LIBS="-L${libdir} -L${pylibdir} -lpython${pyversion}"
           ;;
       esac
	fi
fi

AC_SUBST(PYTHON_INCLUDES)
AC_SUBST(PYTHON_LIBS)
AM_CONDITIONAL(WITH_PYTHON_PLUGIN, test x$with_python_plugin = xtrue)
AC_MSG_RESULT($with_python_plugin)

#
# Test for pthreads. Modifed from http://www.gnu.org/software/ac-archive/htmldoc/acx_pthread.html
#
AC_DEFUN([ACX_PTHREAD], [
#AC_REQUIRE([AC_CANONICAL_HOST])
AC_LANG_SAVE
AC_LANG_C
acx_pthread_ok=no

# We used to check for pthread.h first, but this fails if pthread.h
# requires special compiler flags (e.g. on True64 or Sequent).
# It gets checked for in the link test anyway.

# First of all, check if the user has set any of the PTHREAD_LIBS,
# etcetera environment variables, and if threads linking works using
# them:
if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])
        AC_TRY_LINK_FUNC(pthread_join, acx_pthread_ok=yes)
        AC_MSG_RESULT($acx_pthread_ok)
        if test x"$acx_pthread_ok" = xno; then
                PTHREAD_LIBS=""
                PTHREAD_CFLAGS=""
        fi
        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"
fi

# We must check for the threads library under a number of different
# names; the ordering is very important because some systems
# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
# libraries is broken (non-POSIX).

# Create a list of thread flags to try.  Items starting with a "-" are
# C compiler flags, and other items are library names, except for "none"
# which indicates that we try without any flags at all.

acx_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt"

# The ordering *is* (sometimes) important.  Some notes on the
# individual items follow:

# pthreads: AIX (must check this before -lpthread)
# none: in case threads are in libc; should be tried before -Kthread and
#       other compiler flags to prevent continual compiler warnings
# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
# -pthreads: Solaris/gcc
# -mthreads: Mingw32/gcc, Lynx/gcc
# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
#      doesn't hurt to check since this sometimes defines pthreads too;
#      also defines -D_REENTRANT)
# pthread: Linux, etcetera
# --thread-safe: KAI C++

case "${host_cpu}-${host_os}" in
        *solaris*)

        # On Solaris (at least, for some versions), libc contains stubbed
        # (non-functional) versions of the pthreads routines, so link-based
        # tests will erroneously succeed.  (We need to link with -pthread or
        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
        # a function called by this macro, so we could check for that, but
        # who knows whether they'll stub that too in a future libc.)  So,
        # we'll just look for -pthreads and -lpthread first:

        acx_pthread_flags="-pthread -pthreads pthread -mt $acx_pthread_flags"
        ;;
esac

if test x"$acx_pthread_ok" = xno; then
for flag in $acx_pthread_flags; do

        case $flag in
                none)
                AC_MSG_CHECKING([whether pthreads work without any flags])
                ;;

                -*)
                AC_MSG_CHECKING([whether pthreads work with $flag])
                PTHREAD_CFLAGS="$flag"
                ;;

                *)
                AC_MSG_CHECKING([for the pthreads library -l$flag])
                PTHREAD_LIBS="-l$flag"
                ;;
        esac

        save_LIBS="$LIBS"
        save_CFLAGS="$CFLAGS"
        LIBS="$PTHREAD_LIBS $LIBS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Check for various functions.  We must include pthread.h,
        # since some functions may be macros.  (On the Sequent, we
        # need a special flag -Kthread to make this header compile.)
        # We check for pthread_join because it is in -lpthread on IRIX
        # while pthread_create is in libc.  We check for pthread_attr_init
        # due to DEC craziness with -lpthreads.  We check for
        # pthread_cleanup_push because it is one of the few pthread
        # functions on Solaris that doesn't have a non-functional libc stub.
        # We try pthread_create on general principles.
        AC_TRY_LINK([#include <pthread.h>],
                    [pthread_t th; pthread_join(th, 0);
                     pthread_attr_init(0); pthread_cleanup_push(0, 0);
                     pthread_create(0,0,0,0); pthread_cleanup_pop(0); ],
                    [acx_pthread_ok=yes])

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        AC_MSG_RESULT($acx_pthread_ok)
        if test "x$acx_pthread_ok" = xyes; then
                break;
        fi

        PTHREAD_LIBS=""
        PTHREAD_CFLAGS=""
done
fi

# Various other checks:
if test "x$acx_pthread_ok" = xyes; then
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Detect AIX lossage: threads are created detached by default
        # and the JOINABLE attribute has a nonstandard name (UNDETACHED).
        AC_MSG_CHECKING([for joinable pthread attribute])
        AC_TRY_LINK([#include <pthread.h>],
                    [int attr=PTHREAD_CREATE_JOINABLE;],
                    ok=PTHREAD_CREATE_JOINABLE, ok=unknown)
        if test x"$ok" = xunknown; then
                AC_TRY_LINK([#include <pthread.h>],
                            [int attr=PTHREAD_CREATE_UNDETACHED;],
                            ok=PTHREAD_CREATE_UNDETACHED, ok=unknown)
        fi
        if test x"$ok" != xPTHREAD_CREATE_JOINABLE; then
                AC_DEFINE(PTHREAD_CREATE_JOINABLE, $ok,
                          [Define to the necessary symbol if this constant
                           uses a non-standard name on your system.])
        fi
        AC_MSG_RESULT(${ok})
        if test x"$ok" = xunknown; then
                AC_MSG_WARN([we do not know how to create joinable pthreads])
        fi

        AC_MSG_CHECKING([if more special flags are required for pthreads])
        flag=no
        case "${host_cpu}-${host_os}" in
                *-aix* | *-freebsd*)     flag="-D_THREAD_SAFE";;
                *solaris* | *-osf* | *-hpux*) flag="-D_REENTRANT";;
        esac
        AC_MSG_RESULT(${flag})
        if test "x$flag" != xno; then
                PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
        fi

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        # More AIX lossage: must compile with cc_r
        AC_CHECK_PROG(PTHREAD_CC, cc_r, cc_r, ${CC})
else
        PTHREAD_CC="$CC"
fi

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_CC)

# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
if test x"$acx_pthread_ok" = xyes; then
        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])
        :
else
        acx_pthread_ok=no
        $2
fi
AC_LANG_RESTORE
])dnl ACX_PTHREAD

ACX_PTHREAD
CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
AC_OUTPUT([
libambulant.pc
ambulant.spec
])

dnl ============================================================================
echo "
ambulant-$AMBULANT_VERSION will be built with following parameters:

	targeted prefix:                ${prefix}
	compiler:                       ${CC}

	Enable external DOM:		${test_dom}
	Enable SMIL 3.0 WD:         ${test_smil30}
	Enable overlay window:		${test_overlay}
	Enable SMIL test layout:	${test_smil_test}
	Use expat XML library:		${test_expat}	${expat_path}
	Use xerces XML library:		${test_xerces}	${xerces_path}
	Enable Xerces as plugin:	${xerces_plugin}
	Build with ffmpeg:     		${test_ffmpeg}	${ffmpeg_path}
	Turn on ffmpeg Dirac support:	${dirac}
	Turn on ffmpeg FAAD support:	${faad}
	Build Qtopia frontend:		${qtopia}
	Build Qt frontend:              ${test_qt}
	Build Cocoa frontend:		${cocoa}
	Build with SDL:			${test_sdl}
	Build with GTK:			${test_gtk}
	Build with gstreamer:		${test_gstreamer}
	Build with NOKIA770:		${test_nokia770}
	Build with ARTS support:	${test_arts}
	Build with live555.com RTSP:	${test_live}
	Build with Python support:      ${with_python}
	Build with Python plugin:       ${with_python_plugin}
	Build MacOSX universal binary:  ${with_universalsdk}
     "

if test "x$with_frontend" = "x$false"; then
    AC_MSG_WARN([No GUI support, so no player will be built])
fi
AC_MSG_RESULT([$qt_warning]);
AC_MSG_RESULT([$ffmpeg_warning]);
AC_MSG_RESULT([$live_warning]);
AC_MSG_RESULT([$expat_warning]);
