AC_INIT(ambulant, 1.0)
AM_INIT_AUTOMAKE
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB
AM_PROG_LIBTOOL
AC_CONFIG_FILES([Makefile 
	src/Makefile 
	src/libambulant/Makefile 
	src/player_unix/Makefile
	src/player_macosx/Makefile
	include/Makefile
	include/ambulant/Makefile
	include/ambulant/config/Makefile
	include/ambulant/config/compiler/Makefile
	include/ambulant/config/platform/Makefile
	include/ambulant/config/stdlib/Makefile
	include/ambulant/common/Makefile
	include/ambulant/compat/Makefile
	include/ambulant/lib/Makefile
	include/ambulant/lib/unix/Makefile
	include/ambulant/lib/win32/Makefile
	include/ambulant/mms/Makefile
	include/ambulant/smil2/Makefile
	include/ambulant/net/Makefile
	include/ambulant/gui/Makefile
	include/ambulant/gui/dg/Makefile
	include/ambulant/gui/dx/Makefile
	include/ambulant/gui/none/Makefile
	include/ambulant/gui/cocoa/Makefile
	include/ambulant/gui/qt/Makefile
	include/ambulant/gui/arts/Makefile
	include/ambulant/gui/SDL/Makefile
	include/ambulant/gui/qsound/Makefile
	third_party_packages/Makefile])
#
# Find expat
#
AC_MSG_CHECKING(for --with-expat)
EXPAT_PREFIX=third_party_packages/expat-unix
AC_ARG_WITH([expat],[
	AC_HELP_STRING([--with-expat],
                   [Location expat is installed (default is third_party_packages/expat-unix)])
    ],[
    case "${withval}" in    
     yes) expat=true;
          EXPAT_PREFIX=third_party_packages/expat-unix ;;
     no)  expat=false ;;
     *)   expat=true;
          EXPAT_PREFIX=${withval};;
	esac],[
	expat=true
	EXPAT_PREFIX=third_party_packages/expat-unix
	])
if test x$expat = xtrue; then
	if test  -f $EXPAT_PREFIX/include/expat.h; then
		EXPAT_PREFIX=`cd $EXPAT_PREFIX; pwd`
		EXPAT_LIBS="-L$EXPAT_PREFIX/lib -lexpat"
		EXPAT_INCLUDES="-I$EXPAT_PREFIX/include -DWITH_EXPAT"
	else
		AC_MSG_ERROR([expat not found in $EXPAT_PREFIX, please use --with-expat])
		expat=false
		unset EXPAT_PREFIX
	fi
else
	unset EXPAT_PREFIX
fi

AC_SUBST(EXPAT_PREFIX)
AC_SUBST(EXPAT_LIBS)
AC_SUBST(EXPAT_INCLUDES)
AM_CONDITIONAL(WITH_EXPAT, test x$expat = xtrue)
AC_MSG_RESULT($expat)

#
# Find xerces
#
AC_MSG_CHECKING(for --with-xerces)
xerces=false

AC_ARG_WITH([xerces],[
	AC_HELP_STRING([--with-xerces],
                   [Location xerces is installed (default is third_party_packages/xerces-unix)])
    ],[
    case "${withval}" in    
     yes) xerces=true;
          XERCES_PREFIX=third_party_packages/xerces-unix ;;
     no)  xerces=false ;;
     *)   xerces=true;
          XERCES_PREFIX=${withval};;
     esac])
	
if test x$xerces = xtrue;
then if test -f $XERCES_PREFIX/include/xercesc/parsers/SAXParser.hpp;
     then
     	XERCES_PREFIX=`cd $XERCES_PREFIX; pwd`
	XERCES_LIBS="-L$XERCES_PREFIX/lib -lxerces-c"
	XERCES_INCLUDES="-I$XERCES_PREFIX/include -DWITH_XERCES"
     else  AC_MSG_ERROR([xerces not found in $XERCES_PREFIX, please use --with-xerces])
     fi
else
     unset XERCES_PREFIX;
fi
AC_SUBST(XERCES_PREFIX)
AC_SUBST(XERCES_LIBS)
AC_SUBST(XERCES_INCLUDES)
AM_CONDITIONAL(WITH_XERCES, test x$xerces = xtrue)
AC_MSG_RESULT($xerces)
#
# Test that we have at least one XML parser available
#
if test x$expat = xfalse -a x$xerces = xfalse; then
	AC_MSG_ERROR([No XML parser configured - Use at least one of --with-expat or --with-xerces])
fi

#
AC_MSG_CHECKING(for --with-cocoa)
AC_ARG_WITH(cocoa,
     [  --with-cocoa    Turn on Cocoa support],
     [case "${withval}" in
       yes) cocoa=true ;;
       no)  cocoa=false ;;
       *) AC_MSG_ERROR(bad value ${withval} for --with-cocoa) ;;
     esac
     gui_toolkit_found=true],[
     if test -d /System/Library/Frameworks/AppKit.framework; then
       cocoa=true
       gui_toolkit_found=true
     else
       cocoa=false
     fi
     ])
AM_CONDITIONAL(WITH_COCOA, test x$cocoa = xtrue)
AC_MSG_RESULT($cocoa)

# Calling _AM_DEPENDENCIES here is a workaround for a bug
# in automake: ObjC support is incomplete. And manually
# doing AC_SUBST(OBJCDEPMODE) also fails.
# Some details are in
# http://mail.gnu.org/archive/html/automake/2003-04/msg00105.html
#
_AM_DEPENDENCIES([OBJC])
OBJCFLAGS=-ObjC++
AC_SUBST(OBJCFLAGS)

OBJC=$CC
AC_SUBST(OBJC)


AC_MSG_CHECKING(for --with-qt)
QT_PREFIX=
AC_ARG_WITH(qt,
     [  --with-qt    Turn on Qt support],
     [case "${withval}" in
       yes) qt=true
       		QT_PREFIX=$QTDIR
       		;;
       no)  qt=false
       		;;
       *) 	qt=true
       		QT_PREFIX=${withval}
       		;;
     esac
     gui_toolkit_found=true],[
     case x$QTDIR in
     x)	qt=false
     	;;
     *) qt=true
     	gui_toolkit_found=true
     	QT_PREFIX=$QTDIR
     	;;
     esac])
AM_CONDITIONAL(WITH_QT, test x$qt = xtrue)
if test x$qt = xtrue -a x$QT_PREFIX = x; then
	AC_MSG_ERROR(--with-qt without valid QT_PREFIX directory)
fi
AC_SUBST(QT_PREFIX)
AC_MSG_RESULT($qt)

AC_MSG_CHECKING(for --with-qtopia (cross compilation for Sharp SL-5600 Zaurus))
QTOPIA_PREFIX=
AC_ARG_WITH(qtopia,
     [  --with-qtopia    Turn on Qtopia support (cross compilation for Sharp SL-5600 Zaurus)],
     [case "${withval}" in
       yes) qtopia=true
		QTDIR=/opt/Qtopia/sharp
       		QTOPIA_PREFIX=$QTDIR
       		;;
       no)  qtopia=false
       		;;
       *) 	qtopia=true
       		QTOPIA_PREFIX=${withval}
       		;;
     esac],[
     case x$QTOPIA in
     x)	qtopia=false
     	;;
     *) qtopia=true
     	QTOPIA_PREFIX=$QTOPIA
     	;;
     esac])
AM_CONDITIONAL(WITH_QTOPIA, test x$qtopia = xtrue)
if test x$qtopia = xtrue -a x$QTOPIA_PREFIX = x; then
	AC_MSG_ERROR(--with-qtopia without valid QTOPIA_PREFIX directory)
fi
if test x$qtopia = xtrue; then
  QT_PREFIX=$QTOPIA_PREFIX
  CXXFLAGS="-fno-rtti -pipe -DQT_QWS_EBX -DQT_QWS_CUSTOM -DQWS $CXXFLAGS" 
  AC_MSG_NOTICE(
[For Sharp SL-5600: qtopia-free-1.5.0 is required (/opt/Qtopia)
arm-linux-g++ cross compiler (2.95) must have been installed (/opt/Embedex/tools/bin)
PATH should be prepended: export PATH=/opt/Qtopia/sharp/bin:/opt/Embedix/tools/bin:\$PATH
expat must have been cross-compiled and installed in third_party_packages/expat-unix
configure with: ./configure --build=`config.guess` --host=arm-linux])
fi
AC_MSG_RESULT($qtopia)
#
# Test for SDL
#
AC_MSG_CHECKING(for --with-sdl)
AC_ARG_WITH(sdl,
     [  --with-sdl    Turn on SDL support],
     [case "${withval}" in
       yes) sdl=true
                ;;
       no)  sdl=false
                ;;
       *)   AC_MSG_ERROR(--with-sdl takes no argument - it uses sdl-config)
                ;;
     esac],[
     if sdl-config --libs > /dev/null 2>&1; then
     sdl=true
     else
     sdl=false
     fi
     ])
AM_CONDITIONAL(WITH_SDL, test x$sdl = xtrue)
AC_MSG_RESULT($sdl)

#
# Test for arts 
#
AC_MSG_CHECKING(for --with-arts)
AC_ARG_WITH(arts,
     [  --with-arts    Turn on aRts (basic) support (currently broken) ],
     [case "${withval}" in
       yes) arts=true
                ;;
       no)  arts=false
                ;;
       *)   AC_MSG_ERROR(--with-arts takes no argument - it uses artsc-config)
                ;;
     esac],[
     	arts=false
     ])
AM_CONDITIONAL(WITH_ARTS, test x$arts = xtrue)
AC_MSG_RESULT($arts)
#
# Test for ffmpeg
#
# XXXX FFmpeg installation is quirky. When you build 0.4.8 from source
# and do "make install" the header files don't get installed.
# On a RedHat 9 system it is pre-installed, but in a funny way:
# the includes are in /usr/include/ffmpeg, the library in /usr/lib.
#
# The only workaround I can think of is:
# a) for "--with-ffpmpeg" we first test for an ffmpeg installed in
#    third_party_packages, otherwise we try and make do with the
#    one installed in RedHat 9.
# b) for self-installed ffpmeg pass the path to ffmpeg-0.4.8
#    to configure
AC_MSG_CHECKING(for --with-ffmpeg)
FFMPEG_INCLUDE=
FFMPEG_LIB=
AC_ARG_WITH(ffmpeg,
	[  --with-ffmpeg Turn on ffmpeg audio decoders],
	[case "${withval}" in
	  yes) ffmpeg=true
	  	if test -f `pwd`/third_party_packages/ffmpeg-0.4.8/libavcodec/avcodec.h; then
			# Prefer an fmpeg in third_party_packages
			withvalabs=`pwd`/third_party_packages/ffmpeg-0.4.8
			FFMPEG_CODEC_INCLUDE=${withvalabs}/libavcodec
			FFMPEG_FORMAT_INCLUDE=${withvalabs}/libavformat
			FFMPEG_CODEC_LIB=${FFMPEG_CODEC_INCLUDE}
			FFMPEG_FORMAT_LIB=${FFMPEG_FORMAT_INCLUDE}
	  	else
	  		# If that doesn't exist assume RH9-style
	  	    withvalabs="RH9-style"
		  	FFMPEG_CODEC_INCLUDE=/usr/include/ffmpeg
		  	FFMPEG_FORMAT_INCLUDE=/usr/include/ffmpeg
		  	FFMPEG_CODEC_LIB=/usr/lib
		  	FFMPEG_FORMAT_LIB=/usr/lib
		fi
	  	;;
	  no)  ffmpeg=false
	  	;;
	  *) ffmpeg=true
	     # Turn into absolute path
	     withvalabs=`cd ${withval}; pwd`
	     FFMPEG_CODEC_INCLUDE=${withvalabs}/libavcodec
	     FFMPEG_FORMAT_INCLUDE=${withvalabs}/libavformat
	     FFMPEG_CODEC_LIB=${FFMPEG_CODEC_INCLUDE}
	     FFMPEG_FORMAT_LIB=${FFMPEG_FORMAT_INCLUDE}
	     ;;
	 esac],[
	  	if test -f `pwd`/third_party_packages/ffmpeg-0.4.8/libavcodec/avcodec.h; then
			ffmpeg=true
			withvalabs=`pwd`/third_party_packages/ffmpeg-0.4.8
			FFMPEG_CODEC_INCLUDE=${withvalabs}/libavcodec
			FFMPEG_FORMAT_INCLUDE=${withvalabs}/libavformat
			FFMPEG_CODEC_LIB=${FFMPEG_CODEC_INCLUDE}
			FFMPEG_FORMAT_LIB=${FFMPEG_FORMAT_INCLUDE}
		else
			withvalabs=false
			ffmpeg=false
			AC_MSG_ERROR("ffmpeg not found. To build without ffmpeg (and thus have no network support) use explicit --without-ffmpeg")
			
		fi
	 ])
if test x$ffmpeg = xtrue; then
	# Test for consistency
	if test ! -f $FFMPEG_CODEC_INCLUDE/avcodec.h -o ! -f $FFMPEG_CODEC_LIB/libavcodec.a \
		 -o ! -f $FFMPEG_FORMAT_INCLUDE/avformat.h -o ! -f $FFMPEG_FORMAT_LIB/libavformat.a; then
		AC_MSG_ERROR("--with-ffmpeg value incorrect. Read configure.in for details")
	fi
fi
AM_CONDITIONAL(WITH_FFMPEG, test x$ffmpeg = xtrue)
AC_SUBST(FFMPEG_CODEC_INCLUDE)
AC_SUBST(FFMPEG_CODEC_LIB)
AC_SUBST(FFMPEG_FORMAT_INCLUDE)
AC_SUBST(FFMPEG_FORMAT_LIB)
AC_MSG_RESULT($ffmpeg - $withvalabs)

#
# Test for pthreads. Modifed from http://www.gnu.org/software/ac-archive/htmldoc/acx_pthread.html
#
AC_DEFUN([ACX_PTHREAD], [
#AC_REQUIRE([AC_CANONICAL_HOST])
AC_LANG_SAVE
AC_LANG_C
acx_pthread_ok=no

# We used to check for pthread.h first, but this fails if pthread.h
# requires special compiler flags (e.g. on True64 or Sequent).
# It gets checked for in the link test anyway.

# First of all, check if the user has set any of the PTHREAD_LIBS,
# etcetera environment variables, and if threads linking works using
# them:
if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])
        AC_TRY_LINK_FUNC(pthread_join, acx_pthread_ok=yes)
        AC_MSG_RESULT($acx_pthread_ok)
        if test x"$acx_pthread_ok" = xno; then
                PTHREAD_LIBS=""
                PTHREAD_CFLAGS=""
        fi
        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"
fi

# We must check for the threads library under a number of different
# names; the ordering is very important because some systems
# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
# libraries is broken (non-POSIX).

# Create a list of thread flags to try.  Items starting with a "-" are
# C compiler flags, and other items are library names, except for "none"
# which indicates that we try without any flags at all.

acx_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt"

# The ordering *is* (sometimes) important.  Some notes on the
# individual items follow:

# pthreads: AIX (must check this before -lpthread)
# none: in case threads are in libc; should be tried before -Kthread and
#       other compiler flags to prevent continual compiler warnings
# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
# -pthreads: Solaris/gcc
# -mthreads: Mingw32/gcc, Lynx/gcc
# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
#      doesn't hurt to check since this sometimes defines pthreads too;
#      also defines -D_REENTRANT)
# pthread: Linux, etcetera
# --thread-safe: KAI C++

case "${host_cpu}-${host_os}" in
        *solaris*)

        # On Solaris (at least, for some versions), libc contains stubbed
        # (non-functional) versions of the pthreads routines, so link-based
        # tests will erroneously succeed.  (We need to link with -pthread or
        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
        # a function called by this macro, so we could check for that, but
        # who knows whether they'll stub that too in a future libc.)  So,
        # we'll just look for -pthreads and -lpthread first:

        acx_pthread_flags="-pthread -pthreads pthread -mt $acx_pthread_flags"
        ;;
esac

if test x"$acx_pthread_ok" = xno; then
for flag in $acx_pthread_flags; do

        case $flag in
                none)
                AC_MSG_CHECKING([whether pthreads work without any flags])
                ;;

                -*)
                AC_MSG_CHECKING([whether pthreads work with $flag])
                PTHREAD_CFLAGS="$flag"
                ;;

                *)
                AC_MSG_CHECKING([for the pthreads library -l$flag])
                PTHREAD_LIBS="-l$flag"
                ;;
        esac

        save_LIBS="$LIBS"
        save_CFLAGS="$CFLAGS"
        LIBS="$PTHREAD_LIBS $LIBS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Check for various functions.  We must include pthread.h,
        # since some functions may be macros.  (On the Sequent, we
        # need a special flag -Kthread to make this header compile.)
        # We check for pthread_join because it is in -lpthread on IRIX
        # while pthread_create is in libc.  We check for pthread_attr_init
        # due to DEC craziness with -lpthreads.  We check for
        # pthread_cleanup_push because it is one of the few pthread
        # functions on Solaris that doesn't have a non-functional libc stub.
        # We try pthread_create on general principles.
        AC_TRY_LINK([#include <pthread.h>],
                    [pthread_t th; pthread_join(th, 0);
                     pthread_attr_init(0); pthread_cleanup_push(0, 0);
                     pthread_create(0,0,0,0); pthread_cleanup_pop(0); ],
                    [acx_pthread_ok=yes])

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        AC_MSG_RESULT($acx_pthread_ok)
        if test "x$acx_pthread_ok" = xyes; then
                break;
        fi

        PTHREAD_LIBS=""
        PTHREAD_CFLAGS=""
done
fi

# Various other checks:
if test "x$acx_pthread_ok" = xyes; then
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Detect AIX lossage: threads are created detached by default
        # and the JOINABLE attribute has a nonstandard name (UNDETACHED).
        AC_MSG_CHECKING([for joinable pthread attribute])
        AC_TRY_LINK([#include <pthread.h>],
                    [int attr=PTHREAD_CREATE_JOINABLE;],
                    ok=PTHREAD_CREATE_JOINABLE, ok=unknown)
        if test x"$ok" = xunknown; then
                AC_TRY_LINK([#include <pthread.h>],
                            [int attr=PTHREAD_CREATE_UNDETACHED;],
                            ok=PTHREAD_CREATE_UNDETACHED, ok=unknown)
        fi
        if test x"$ok" != xPTHREAD_CREATE_JOINABLE; then
                AC_DEFINE(PTHREAD_CREATE_JOINABLE, $ok,
                          [Define to the necessary symbol if this constant
                           uses a non-standard name on your system.])
        fi
        AC_MSG_RESULT(${ok})
        if test x"$ok" = xunknown; then
                AC_MSG_WARN([we do not know how to create joinable pthreads])
        fi

        AC_MSG_CHECKING([if more special flags are required for pthreads])
        flag=no
        case "${host_cpu}-${host_os}" in
                *-aix* | *-freebsd*)     flag="-D_THREAD_SAFE";;
                *solaris* | *-osf* | *-hpux*) flag="-D_REENTRANT";;
        esac
        AC_MSG_RESULT(${flag})
        if test "x$flag" != xno; then
                PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
        fi

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        # More AIX lossage: must compile with cc_r
        AC_CHECK_PROG(PTHREAD_CC, cc_r, cc_r, ${CC})
else
        PTHREAD_CC="$CC"
fi

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_CC)

# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
if test x"$acx_pthread_ok" = xyes; then
        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])
        :
else
        acx_pthread_ok=no
        $2
fi
AC_LANG_RESTORE
])dnl ACX_PTHREAD

ACX_PTHREAD
CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
AC_OUTPUT

# Finally we check that the configuration makes sense
if test "x$gui_toolkit_found" != xtrue; then
	AC_MSG_ERROR([No GUI toolkit found so cannot build player. Use explicit --without-qt or similar to suppress this error.])
fi
