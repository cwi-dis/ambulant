#
# This automake file is quite a bit of a hack, mainly because (a) automake
# and Python distutils aren't very friendly to each other and (b) distutils
# does not like to be run outside of the source directory.
#
# (a) is solved by pretty much ignoring automake and using the all-am and related
# targets to depend on targets that build and install through distutils.
# (b) is solved by running setup.py in the source directory. This should also
# work for building for multiple platforms, because distutils has its own
# platform structure under its build directory (but it will not work for building
# with multiple pythons, etc).
#

ambulantlibdir=$(top_builddir)/src/libambulant/.libs

DESTDIR=/

EXTRA_DIST=setup.py \
	bgenCxxSupport.py bgenBackSupport.py \
	ambulantscan.py ambulantsupport.py genobjects.py \
	ambulantutilities.h ambulantutilities.cpp \
	ambulantmodule.h ambulantmodule.cpp \
	ambulantinterface.h ambulantinterface.cpp \
	player_pygtk player_pyqt test

# Various flags for optional features

if WITH_QT
extra_qt_cflags=-DWITH_QT
extra_qt_ldflags=-lambulant_qt -L$(QT_PREFIX)/lib -lqt-mt
else
extra_qt_cflags=
extra_qt_ldflags=
endif
if WITH_GTK
extra_gtk_cflags=-DWITH_GTK $(GTK_CFLAGS)
extra_gtk_ldflags=-lambulant_gtk $(GTK_LIBS)
else
extra_gtk_cflags=
extra_gtk_ldflags=
endif
if WITH_FFMPEG
extra_ffmpeg_ldflags=-lambulant_ffmpeg $(FFMPEG_LIBS)
else
extra_ffmpeg_ldflags=
endif
if WITH_SDL
sdl_config=`sdl-config --libs`
extra_sdl_ldflags=-lambulant_sdl $(sdl_config)
else
extra_sdl_ldflags=
endif

# Get all the extra bits together
# XXXX Why does this not work??? EXTRA_LDFLAGS=$(extra_qt_ldflags)
EXTRA_CFLAGS=$(extra_qt_cflags) $(extra_gtk_cflags)

# These targets are magic for automake

all-am: build-pyambulant

check-am: check-pyambulant

install-exec-hook: install-pyambulant

uninstall-local:
	echo Cannot uninstall pyambulant module, please remove manually

# This target re-creates the cpp files. Use only when you know what you
# are doing.

regen: regenerate-pyambulant

BGENADDITIONS=$(srcdir)/bgenCxxSupport.py $(srcdir)/bgenBackSupport.py
BGENOUTPUT=$(srcdir)/ambulantmodule.cpp $(srcdir)/ambulantinterface.cpp
BGENTEMP=$(srcdir)/ambulantgen.py
BGENINPUT=$(srcdir)/ambulantscan.py $(srcdir)/ambulantsupport.py
GENOBJOUTPUT=$(srcdir)/ambulantobjgen.py $(srcdir)/ambulantincludegen.py $(srcdir)/ambulantmodule.h

# Set these variables to change the way the tests are run
DEBUGGER=
#DEBUGGER=gdb --args
PYTHONARGS=
#PYTHONARGS=-i
PYTHONENV=
#PYTHONENV=DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib

BUILDLIBDIR=`echo ./build/lib.*`

build-pyambulant: $(srcdir)/setup.py $(BGENOUTPUT) $(srcdir)/ambulantutilities.cpp $(srcdir)/ambulantutilities.h $(srcdir)/ambulantmodule.h
	( a=`cd $(ambulantlibdir); pwd` ; \
	  cd $(srcdir) ; chmod +w . ; \
	  LDFLAGS="-L$$a $(extra_qt_ldflags) $(extra_gtk_ldflags) $(extra_ffmpeg_ldflags) $(extra_sdl_ldflags) $(LDFLAGS)" $(PYTHON) setup.py build ; \
	)

check-pyambulant:
	( a=`cd $(ambulantlibdir); pwd`:../../third_party_packages/installed/lib ; \
	  cd $(srcdir) ; \
	  LD_LIBRARY_PATH="$$a:$$LD_LIBRARY_PATH" DYLD_LIBRARY_PATH="$$a:$$LD_LIBRARY_PATH" $(PYTHONENV) PYTHONPATH=$(BUILDLIBDIR) $(DEBUGGER) $(PYTHON) $(PYTHONARGS) test/test_pyambulant.py ; \
	)

install-pyambulant:
	if test $(prefix) = "/usr" -o $(prefix) = "/usr/local"; then \
		cd $(srcdir) ; $(PYTHON) setup.py install --root $(DESTDIR) --prefix `$(PYTHON) -c "import sys; print sys.prefix"` ; \
	else \
		cd $(srcdir) ; $(PYTHON) setup.py install --home $(DESTDIR)/$(prefix) ; \
	fi

mostlyclean-local:
	-cd $(srcdir) ; $(PYTHON) setup.py clean
	-rm -r $(srcdir)/build

DISTCLEANFILES=ambulant.so ambulant-2.2-py2.7.egg_info

# Targets to regenerate ambulantmodule.cpp and ambulantinterface.cpp

regenerate-pyambulant:
	cd $(srcdir) ; $(PYTHON) genobjects.py
	cd $(srcdir) ; $(PYTHON) ambulantscan.py

# Debug target

testplay:
	cd $(srcdir) ; $(PYTHONENV) PYTHONPATH=$(BUILDLIBDIR) $(DEBUGGER) $(PYTHON) $(PYTHONARGS) test/nogui_player.py ../../Extras/DemoPresentation/NYC-SMIL2.smil
