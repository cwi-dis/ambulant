Ambulant Player README
======================

This directory contains version 0.5 of Ambulant,
a playback engine for SMIL documents. 
This release is known externally as AMBULANT/X.
It is an intermediate release of the Ambulant Player Project.
The Ambulant homepage is at <http://www.ambulantplayer.org>.

Ambulant consists of a core library implementing the engine,
a number of GUI-toolkit specific libraries implementing renderers,
and a number of player applications.

Ambulant is distributed as either a source distribution or a
binary installer for a specific platform. This README file
is common to all distributions, see below for instructions on building 
from source.

Supported platforms
-------------------

Currently we have support for:
- Linux
- MacOSX
- Windows
- Windows CE
- Linux for handhelds (Qtopia)

The specific platforms that have been used for testing are:
- Linux: RedHat 9 on fairly recent Intel hardware
- MacOSX: 10.3
- Windows: Windows 2000 and Windows XP on fairly recent Intel hardware
- Windows CE: PocketPC 2002 on Compaq IPAQ hardware (Strong Arm processors)
- Linux for handhelds: Zaurus (Sharp SL-5600 PDA).

Supported media types
---------------------

- Text is supported on all platforms.
- Images in PNG, JPEG and GIF formats are supported on all
  platforms. Other formats are supported on some platforms.
- Audio:
  - Windows supports audio through DirectX, so all DirectX-compatible
    formats are supported.
  - Windows CE supports only MP3, and cannot mix multiple audio
    streams in this release.
  - MacOSX and Linux support audio through FFMPEG and SDL,
    giving support for MP3 and many other formats, but not
    all codecs may be supported on WMA or QuickTime files.
    Some audio files may be played back at an incorrect sample rate.
- Video:
  - Windows supports video through DirectX.
  - Windows CE does not support video in this release.
  - MacOSX supports video through QuickTime.
  - Linux does not support video in this release.

Networking support
------------------

This release has limited support for networked media. The SMIL
presentation itself must be in a local file, media items can
be retrieved via HTTP or RTP/RTSP on some platforms.

SMIL support
------------

This release supports full SMIL 2.0, with the following broad
exceptions:
- Limited support for internal linking; linking to external HTML sites
  is supported.
- No support for transitions in this release.
- No support for SMIL animation in this release.
- tag names must match media type, and no support for mimetypes

Documentation
-------------

Documentation of the overall design and the class relationships
can be found in: Documentation/Design in a source distribution.

Examples
--------

Two example SMIL 2.0 documents are included, more are available
at <http://www.ambulantplayer.org>. In the binary distributions,
examples are placed in the toplevel distribution directory; in
source distributions, they are in the Extras directory.

The Welcome document is played automatically the very first time you
start the Ambulant Player on MacOSX and can be played manually on other
platforms.

The DemoPresentation document is a slightly more elaborate example with
some variations to show off various features of SMIL, a readme
file is included.

Building from source
====================

Prerequisites
-------------

Obviously you will need a compiler/linker/development environment.
For Windows you need Microsoft Visual Studio .NET version 7.1.
For Linux desktop and MacOSX you need GNU gcc, at least version 3.2.
For Windows CE you need Microsoft Embedded Visual C++ version 3.0.
For Zaurus you need qtopia 1.5 with gcc 2.95.2.

You also need to build and install several third party packages
that Ambulant depends on. All these are supplied in the third_party_packages
directory; see the readme file in that directory for detailed instructions 
on the exact version numbers, download instructions, etc.

These packages can be built from source, but because this may be
difficult on some platforms (especially Windows and the PDA platforms)
we have created archives of pre-configured and pre-built
third_party_packages for a few common platforms. See
<http://www.ambulantplayer.org> or the sourceforge download area for
details.

Building for Linux
------------------

First make sure you install the third party packages on which Ambulant
depends, see third_party_packages/readme.txt.

Then the normal "configure"/"make"/"make install" combo can be used here
in the toplevel directory to create the player.

Building for Mac OS X
---------------------

First make sure you install the third party packages on which Ambulant
depends, see third_party_packages/readme.txt.

Then the normal "configure"/"make"/"make install" combo can be used here
in the toplevel directory to create the player.

"make install" installs the shared libraries and such into the path
specified with the --prefix configure option, but the application,
"Ambulant Player.app" is always installed into /Applications.

An XCode project is also available, mainly for debugging purposes, but
this needs some handcrafting to get it to work (it contains absolute
pathnames to include directories to work around an XCode bug).

Building for Windows
--------------------

Installing and building the third party packages on Windows is more of a
pain than it is on unix. For this reason, read these instructions *very carefully*,
please. We hope these instructions are complete, otherwise
please report back.

Install the following distributions into directories in third_party_packages:
- expat: XXXX
- jpeg: XXXX
- lpng125: XXXX
- mp3lib: XXXX
- zlib: XXXX
As some of these need some fiddling (missing Visual Studio projects, that
sort of things) you are best off downloading the
third_party_packages-WIN.zip archive, it contains versions that
are known to work on at least one machine. Download and unzip in a temporary
location, then move the directories named above into third_party_packages
in your ambulant distribution.

Next, build these by opening
third_party_packages\third_party_packages.sln in Visual Studio,
selecting the "Release" configuration and doing Build->Build Solution.

When this succeeds double-click the batchfile
third_party_packages\copy_tpp_win32.bat, which copies the various
libraries (libexpat.lib, libjpeg.lib, libpng13.lib and zlib.lib) to
lib\win32 in the toplevel Ambulant directory. The corresponding DLLs are
copied to bin\win32 in the toplevel directory.
NOTE: if this step fails please inspect the script and do the
needed copies by hand.

After these steps you are ready to build AmbulantPlayer itself: open
src\Ambulant-win32.sln in Visual Studio, select the Release configuration
and do Build->Build Solution.

The resulting application is deposited in bin\win32 in the toplevel
directory.

Building for Zaurus
-------------------

For Zaurus, see detailed instructions in README-ZAURUS.

Building for Windows CE
-----------------------

Installing and building the third party packages for Windows CE is even more of a
pain than it is for Windows desktop. For this reason, read these instructions
*very carefully*, please. We hope these instructions are complete, otherwise
please report back.

The projects (and these instructions) have been tried only for Windows CE on various
Compaq (or HP) iPaqs, the oldest one being a 3660. Of the various configurations
in the project files, only the ones for this specific platform (ARM processor,
non-debugging, PocketPC operating system) have been kept up-to-date.

Install the following distributions into directories in third_party_packages:
- expat: XXXX
- jpeg: XXXX
- lpng125: XXXX
- mp3lib: XXXX
- zlibce: XXXX
As most of these need some fiddling (missing Visual Studio projects, that
sort of things) you are best off downloading the
third_party_packages-WIN.zip archive, it contains versions that
are known to work on at least one machine. Download and unzip in a temporary
location, then move the directories named above into third_party_packages
in your ambulant distribution.

Next, build these by opening
third_party_packages\third_party_packages.vcw in Embedded Visual C++ 3.0,
select the expat project as default project, 
select the "ARM Release" configuration for the "PocketPC" platform and build.
Repeat these steps for all projects in the workspace.

When this succeeds double-click the batchfile
third_party_packages\copy_tpp_wince.bat, which copies the various
libraries (libexpat.lib, libjpeg.lib, libpng13.lib and zlib.lib) to
lib\wince-arm in the toplevel Ambulant directory. 

NOTE: if this step fails please inspect the script and do the
needed copies by hand.

After these steps you are ready to build AmbulantPlayer itself: open
src\Ambulant-wince.vcw in Embedded Visual C++ 3.0, select the "ARM Release" 
configuration for the "PocketPC" platform and build.

The resulting application is deposited in bin\wince-arm in the toplevel
directory.

