Ambulant design, main objects 
=============================

Last updated for Ambulant version 1.1.

This document describes the function of various of the more important
objects and interfaces in the Ambulant Player. If you haven't already done
so it is probably a good idea to first read the `Overall design`_ and 
`walkthrough`_ documents. The first one explains the design principles and
some of the choices made, the second one is a brief walkthrough of how the
player loads, parses and plays a SMIL document.

.. _Overall design: overall.html
.. _walkthrough: walkthrough.html

AmbulantPlayer interfaces
-------------------------

- `Player`_. This is the toplevel object.
- `Document`_. The representation of a SMIL document. This document
  also contains a description of the DOM tree (``node`` objects) and related
  objects.
- `Parser`_. Describes the interfaces to the XML parser.
- `Data source`_. Think of these as "media items", they may refer to a URL
  or part of a multiplexed stream or so, and provide data to renderers and
  to the parser.
- `Playable`_ and `Renderer`_. These two interfaces together make
  media items appear on-screen. The first one is the interface as the scheduler
  uses it to start and stop playback. The second interface is specific to
  media items that appear on-screen, and handles things like reacting to
  redraw requests.
- `Layout`_. This document describes the interfaces that are responsible
  for determining where and how the media items are displayed.

.. _Player: player.html
.. _Document: document.html
.. _Parser: parser.html
.. _Data source: datasource.html
.. _Playable: playable.html
.. _Renderer: renderer.html
.. _Layout: layout.html


AmbulantPlayer Objects
----------------------

- `Event processor`_. This is the mainloop plus the event/callback mechanism.
- `Region`_. This is an area of screen space, it is part of an implementation
  of the Layout objects sketched above.
- `Clocks`_. These advance a virtual time.
- `Timeline`_. This is a description of another scheduler: the MMS scheduler.
  This scheduler has a much simpler structure than the SMIL 2.0 scheduler.

.. _Event processor: event_processor.html
.. _Region: region.html
.. _Renderer: renderer.html
.. _Timeline: timeline.html

For each of these we have an accompanying PDF document with UML graphics
showing how the object relates to other objects. These can be found
in the `models`_ directory.

.. _models: ../models

  
In addition we have various auxiliary objects that are explained in
`auxobjects.txt`_.

.. _auxobjects.txt: auxobjects.html

You may notice that the core of the player, the SMIL 2.0 scheduler, is not
mentioned here. Unfortunately it is not documented yet.

Refcounting protocol
--------------------

The `refcounting protocol` is contained in the file ``lib/refcount.h``. It needs to
be implemented only by objects that are truly shared, i.e. any object whose
lifetime is not predetermined by some other object. New instances of refcounted
objects are created using the operator new. Any object that needs to share
a particular instance calls add_ref against this instance. The creator
of the refcounted object and any sharer are responsible to call the release
function of the object when they don't need the object any more. 

Clocks
------

All clocks adhere to the ``abstract_timer`` interface. This interface
allows you to get the current time and set the speed of the clock.

There is a companion interface ``abstract_timer_client`` (which is actually
a base class of ``abstract_timer``) that allows objects to get notification
of changes in timer speed.

Currently there are two implementations of the ``abstract_timer`` interface:
the operating-system specific realtime clock (of which you cannot set the
speed) and ``timer``, which implements a new zero-based clock
based on another ``abstract_timer``. Its speed is settable
with ``set_speed``, but it is tightly synchronized with its parent clock.

Eventually there will be other implementations of ``timer``,
such as clocks that are allowed to slip synchronization and other such
semantics as required by SMIL.
