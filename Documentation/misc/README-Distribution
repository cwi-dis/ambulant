Creating ambulant releases
==========================

This document explains how to cut releases. Doing a release is very boring
and tedious, but please follow these guidelines closely. While getting ready
for a release you should have almost the opposite mindset of during normal
development: only fix what really needs fixing, and please don't be creative.
Also remember that testing is very important. If you decide to save 1 minute
of tedious work by not running all the tests this could well result in another
bug fix release being needed a few weeks later, leading to _days_ of extra
work for everyone (including you:-).

Version numbers, release branches and tags
==========================================

We use a strict numbering scheme for versions. Development versions have
an odd minor number, releases an even one. For example, "1.5" is a development
version, and is a moving target. Once development is finished and we're
getting ready for a release (which will be called "1.6") we create a release
branch called "release-ambulant-16-branch". On this branch, we do the work
described below. Once everything has been tested and the distributions created
(and everything checked in:-) we tag the release branch with tag
"release-ambulant-16". Changes made on the release branch are _not_
propagated to the trunk at this point.

Now we need to merge the changes to the trunk. Set your working copy
to the trunk and "cvs up -jrelease-ambulant-16-branch". Test and commit.

Next, we want to tag the _branch_ to show that we have merged up to here:
set your working copy to the branch, and tag with "release-ambulant-16-merge".

Now go back to the trunk, set version numbers to "1.7" and start working on
wonderful new ideas. But first: do all the tests you did for the release
on the trunk as well, to make sure that all fixes you made on the release
branch have been propagated to the trunk correctly.

Some time later a bug fix release "1.6.1" will have to be done. Switch your working
copy to the "release-ambulant-16-branch" and fix the bugs. Do not add new features,
and only fix critical bugs! Go through the whole distribution and testing
rigamarole explained below. When the releases have been created tag
the branch with "release-ambulant-161". Again, don't propagate fixes to the
trunk just yet.

If at some point you fix something on the trunk but later decide you want that
fix on the release branch too you need to do a bit more. First you merge the
fix to the branch, by doing (on the branch) something like "cvs up -j1.42 xxx.c" (or
a "cvs diff" on the trunk and a "patch" on the branch).
Then you test the fix and check it in (still on the branch). Finally you have to
update the "release-ambulant-16-merge" tag so the fix doesn't get sent back to the
trunk later (which would apply it twice) by doing
"cvs tag -F release-ambulant-16-merge xxx.c".

After the release you need to merge the changes again, but only the ones
you didn't merge previously. Set working copy to the trunk, and
"cvs up -jrelease-ambulant-16-merge -jrelease-ambulant-16-branch". (NOTE:
this has not been tested yet so please take care and modify this sentence if
it turns out to be wrong:-). Finally we need to move the "-merge" tag to
show up to which point the branch has been merged: set your working
copy to the branch, and "cvs tag -F release-ambulant-16-merge" to move
the tag.

A final note: releases 1.4.X and earlier have not followed these guidelines
exactly, the branch and tag names are slightly different (release-ambulant-14
for the branch, release-ambulant-14-tag for the release tag) and the "-merge"
tag was not used.

Before creating the distribution
================================

- make sure your CVS tree is up to date and that there are no uncommited files
- make sure all /*AM_DBG*/ have been changed into AM_DBG
- make sure all the correct renderers are configured (for example the
  quicktime video renderer on the mac)
- change the version number in:
  - configure.in
  - include/ambulant/version.h
  - src/player_macosx/Info.plist
  - src/player_macosx/*.lproj/InfoPlist.strings
  - src/player_wince/AmbulantPlayer.rc
  - src/player_mfc/AmbulantPlayer.rc (Dialog IDD_ABOUTBOX)
  - src/AmbulantWin32Installer/AmbulantWiseInstaller.wse
  	- Product Details->Default Directory
  	- General Information->Installation Version
  	- Add/Remove Programs -> Software Version
  	- Shortcuts
  	- Build Settings -> Installation .exe name
  - src/AmbulantWin32Installer/AmbulantWinCEWiseInstaller.wse
  	- Product Details->Default Directory
  	- Add/Remove Programs -> Software Version
  	- General Information->Installation Version
  	- Build Settings -> Installation .exe name
- check the following files for being up-to-date:
  - README
  - INSTALL
  - Documentation/misc/README-ZAURUS
  - Documentation/misc/README-Distribution (this file)
  - third_party_packages/readme.txt
- Update the icons in the following files:
  - src/player_mfc/res/AmbulantPlayer.ico
  - src/player_wince/res/AmbulantPlayer.ico
  - src/player_macos/cocoambulant.icns
- The sources in src/pyambulant need to be regenerated. Currently this can only
  be done with a Python from cvs, by running "make regenerate-pyambulant".
- Make sure Documentation/API/{refman,html} are empty: we don't want the
  full doxygen output in our source distribution
- You must update NEWS, give a high-level overview of what has changed.
- You must update Changelog. There is a tool cvs2cl that does this
  more-or-less automatically, something like the following command line should
  do the trick:
  
  % cvs log -b -d '>'2004-07-01 | cvs2cl.pl --hide-filenames --stdout --stdin
  (the perl script is on http://www.red-bean.com/cvs2cl/cvs2cl.pl).
  
  Note that if we're preparing for a micro-release you should replace the '-b'
  with -rrelease-ambulant-xxx and merge the output into ChangeLog.

- Update the API documentation in Documentation/API by running doxygen
  Read and check the documentation for consistency, errors and missing items.

- Update the translations:
  - in po, run "make ambulant.pot-update"
  - Edit the various ".po" files. Especially check empty strings
    and fuzzy matches.

To create the linux source distribution
=======================================

- Check out a clean copy from CVS, follow the instructions in README-CVS
- Make sure you configure with *all* options (--with-xerces --with-live)
  otherwise not all sources will be included
- Use make distcheck
- If make distcheck complains about not being able to find expat, 
  you have to set the path to the expat library via the environment variable:
 

	DISTCHECK_CONFIGURE_FLAGS="--with-expat=`pwd`/third_party_packages/expat-unix --with-ffmpeg=`pwd`/third_party_packages/ffmpeg-0.4.8" make distcheck
- make dist
- Check on a (preferably virgin) machine, again with all options enabled.
- Check on a Windows machine too! We've had missing windows-only files before:-)
- Check on a Mac too, but this is probably a bit less important.
- Do a "diff -qr" between an unpacked new distribution and an unpacked
  previous distribution. Look at all files that occur only in the old
  but not in the new distribution (and vice versa). For each of those
  determine that this is intended.

Creating the third_party_packages-WIN32 distribution
====================================================

To be supplied.

Binary distribution contents
============================

All binary distribution should contain the following files:
- README
- the player binary, preferable staticly linked
- COPYING (The GNU License)
- DemoPresentation from Extras

Windows desktop also needs:
- Welcome from Extras
- AmbulantPlayerHelp.chm from Documentation/user-htmlhelp

Windows CE needs:
- Welcome from Extras

Zaurus needs:
- Welcome from Extras
- README-ZAURUS from Documentation/misc
- Documentation/user

Creating the MacOSX installer
=============================

- Build the whole source tree, don't forget options for
  enabling xerces, etc. You want to build with Xerces in a plugin,
  live support, no Python support, only fast internal DOM acces,
  i.e. with
    ../configure -C --with-ffmpeg --without-external-dom \
        --without-python --with-live \
        --with-xerces --with-xerces-plugin
- Install the player in src/player_macos.
- Create a folder called something like "Ambulant Player 1.6", 
  and copy the items mentioned above into it.
- Use Applications->Utilities->Disk Utilities to create a .dmg
  disk image from this folder (read only, compressed). Make sure the
  version number is part of the disk image name.

Creating the Windows desktop installer
======================================

Build the player. Make sure you are building a *Release* player,
not a *Debug* player.

Open src/AmbulantWin32Installer/AmbulantWiseInstaller.wse with Wise.
Make sure the files mentioned above are included. If you need to add more
files: Wise will use absolute paths by default (for the source files), you
want to turn these into relative paths.

The installer will be deposited in bin/win32. You need to change the filename
to include the version number.

Creating the Windows CE installer
=================================

Build the player. Make sure you are building a *Release* player,
not a *Debug* player.

Open src/AmbulantWin32Installer/AmbulantWinCEWiseInstaller.wse with Wise.
The procedure is pretty similar as for the desktop windows player, the
installer ends up in bin/wince.

Creating the Zaurus installer
=============================

To be supplied.

Creating the Linux installer
============================

For this release we will probably not do Linux binary installers,
but as we have done one before we should write down the procedure here.


Testing the distributions
=========================

Here are some random remarks about testing the distributions. Note that
during the distribution test period it is important to be thorough and
precise. If you save yourself a few minute of effort by not testing
something or not reporting a problem this may well result in an extra
bugfix release later (which will cost everyone another 2 days or so of work).

- IMPORTANT: while we are testing distributions we want to make absolutely
  sure that any bugs are either (a) fixed or (b) acknowledged as known bugs.
  Therefore, if you find a bug that you think may be critical you *must*
  submit a bug report with high priority and assign to the release czar
  (probably Jack).

- The Mac player must definitely be tested on a virgin machine,
  to ensure there are no dependencies on dynamic libraries in /usr/local
  or something like that.
  
- The Mac player must also be tested on older MacOS releases (at least the
  oldest supported), and either be made to run or the minimum required
  OS version adapted.
  
- On all platforms, test either on a virgin machine or at least
  clear out preferences before testing (unix: $HOME/.ambulant;
  mac: ~/Library/Preferences/org.ambulantplayer.ambulantplayer.plist;
  windows: HKEY_CURRENT_USER\Software\Ambulant\AmbulantPlayer in the registry).
  
- On windows, test on at least Win98, Win2K and WinXP.
  
- Make sure Welcome plays at first run. Check that the preferences have
  sensible defaults (log level: trace, parser: expat, log window: closed).

- Then play DemoPresentation/NYC-SMIL2.smil.
  Then play the website documents. Use the Xerces parser. Open the log window,
  select "debug" output, and make sure that there aren't any accidental
  AM_DBG's left on.
  
- For each platform, try and get someone knowledgable with the platform but
  not the Ambulant Player to build the distribution.
  
- On the platforms that support it (Linux, Mac) test localisation. We
  should have at least English and Dutch working.
  
- On each platform, check that the version numbers are correct in things
  like the about dialog, Get Info (Properties) in the Finder (Explorer), etc.

- We can use vin.cst.cwi.nl to test it on newer distributions then our desktop.
  (at this moment fedora core 3)

  
Uploading the distributions
===========================

Adding a new file release package
---------------------------------
A release package is a collection of file releases (binary as well as
source) for different platforms but the with same version number. To add
a SF release package choose in the admin menu File Releases. At the
bottom of the page you will find a field where you can add the name of a
new release package. We have to use different names for our release
packages. (such that the latest release is always on top). I propose to
use the following naming scheme, Ambulant <version number> (eg Ambulant
1.0, Ambulant 1.2). The minor release number is always even for stable
releases, the development version uses the uneven numbers.

Adding file releases to a release package
-----------------------------------------
To add files to a release package choose in the admin menu File
releases. At the bottom you will find an overview of all the release
packages, click on Add Release next to the release package  you want to
add a release to. You will be asked a release new release name. Make
sure this name is a unique name (so we can easily track it down in the
SF stats). The next step is to upload and add the file belonging to the
release. Upload the file to upload.sourceforge.net and click on Edit
Releases belonging to the release package your editing in the package
overview, and click again on edit release next to the release you want
to add a file to. Fill in the neccesary information in Step 1, and
select the file in Step 2. In Step 3 fill in the right processor type
and file type for the released file.

Proposed naming scheme for release names:

- Binary packages: ambulant-<versionnumber>-<platform>.ext (eg. for
  windows ambulant-1.2-win32.exe, for mac ambulant-1.2-osx.dmg).
- Source package: I think the name make distcheck gives to the package is
  fine. eg ambulant-1.2.tar.gz. Don't use ".tgz", winzip doesn't like it.

Again the minor release number indicates a stable release if the number is even.


Hiding a file release package
-----------------------------
Make sure that all file releases belonging to a file release package are hidden.
If not, you can not hide the release package and it will stay active.

Updating the website
====================

To be supplied. Here are some random thoughts:
- The design and API docs need to be uploaded
- The SMIL documents need to be uploaded (if changed)



Advertising the distributions
=============================

To be supplied. Some ideas, plus who knows how to submit things:
- ambulant-announce
- ambulant-users
- www-smil
- W3C (Dick)
- NLnet (Dick)
-   http://guide.apple.com/usindex.lasso (jack)
-   http://www.apple.com/downloads/macosx/submit (jack)
-   http://www.versiontracker.com/ (jack, userid Jack.Jansen@oratrix.com)
-   http://www.macshareware.net (jack, userid jackjansen)
-	A macpad file is in www.cwi.nl/~jack/macpad. There's a pad file there too.
-   press@macnn.com (jack)
-   http://www.macupdate.com (jack)
-   http://www.tucows.com (jack, username ambulant)
